{"title":"广播数据扫描和发送","date":"2022-08-31T05:44:07.360Z","source":"_posts/广播数据扫描和发送.md","raw":"---\ntitle: 广播数据扫描和发送\ndate: 2022-08-31 13:44:07.36\nupdated: 2022-08-31 13:45:42.637\ncategories: \ntags: \n- linux应用开发\n---\n广播数据扫描和发送\n<!-- more -->\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include <netinet/ip.h>\n#include <arpa/inet.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <errno.h>\n\n#include <netinet/in.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <unistd.h>\n#include <pthread.h>\n#include <sys/select.h>\n\n \n#define ERRLOG(errmsg) do{\\\n                perror(errmsg);\\\n                printf(\"%s--%s(%d)\\n\", __FILE__, __func__, __LINE__);\\\n                exit(-1);\\\n            }while(0)\n \nint scanMsg(const char* ip, const char* port, const char* groupNamePack, const char* masterIP)\n{\n    int sockfd = socket(AF_INET, SOCK_DGRAM, 0);\n    if(-1 == sockfd){\n        ERRLOG(\"socket error\");\n\t\tclose(sockfd);\n\t\treturn -1;\n    }\n \n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(atoi(port));\n    server_addr.sin_addr.s_addr = inet_addr(ip);\n    socklen_t addrlen = sizeof(server_addr);\n \n    if(-1 == bind(sockfd, (struct sockaddr *)&server_addr, addrlen)){\n        ERRLOG(\"bind error\");\n\t\tclose(sockfd);\n\t\treturn -1;\n    }\n \n    struct sockaddr_in client_addr;\n    memset(&server_addr, 0, sizeof(client_addr));\n    socklen_t clientaddrlen = sizeof(client_addr);\n \n    char buff[128] = {0};\n\tfd_set rset;\n\tFD_ZERO(&rset);\n\tFD_SET(sockfd, &rset);\n\n\tstruct timeval tv;\n\ttv.tv_sec = 0;\n\ttv.tv_usec = 100*1000;\n\n\tint retsta = select(sockfd + 1, &rset, NULL, NULL, &tv);\n\tif(retsta < 0){\n\t\tERRLOG(\"select error\");\n\t\tclose(sockfd);\n\t\treturn -1;\n\t}else if (retsta > 0 && FD_ISSET(sockfd, &rset)){\n\t\tif(-1 == recvfrom(sockfd, buff, 128, 0, (struct sockaddr *)&client_addr, &clientaddrlen)){\n\t\t\tERRLOG(\"recvfrom error\");\n\t\t\tclose(sockfd);\n    \t\treturn -1;\n\t\t}\t\t\n\t\tprintf(\"%s(%d):%s\\n\", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port), buff);\n\t\tif(strcmp(buff, groupNamePack) == 0){\n\t\t\t//发送应答信息\n\t\t\tif(-1 == sendto(sockfd, masterIP, strlen(masterIP), 0, (struct sockaddr *)&client_addr, clientaddrlen)){\n\t\t\t\tERRLOG(\"sendto error\");\n\t\t\t\tclose(sockfd);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t}else{\n\t\tprintf(\"scanMsg don't receive mess\\n\");\n\t}\n\tclose(sockfd);\n    return 0;\n}\n \nint sendMsg(const char* ip, const char* port, const char* groupNamePack, char* masterIP, size_t len)\n{\n    int sockfd = socket(AF_INET, SOCK_DGRAM, 0);\n    if(-1 == sockfd){\n        ERRLOG(\"socket error\");\n\t\tclose(sockfd);\n\t\treturn -1;\n    }\n \n    //设置套接字允许发送广播\n    int on = 1;\n    if(-1 == setsockopt(sockfd, SOL_SOCKET, SO_BROADCAST, &on, sizeof(on))){\n        ERRLOG(\"setsockopt error\");\n\t\tclose(sockfd);\n\t\treturn -1;\n    }\n \n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(atoi(port));\n    server_addr.sin_addr.s_addr = inet_addr(ip);\n    socklen_t addrlen = sizeof(server_addr);\n \n\tif(-1 == sendto(sockfd, groupNamePack, strlen(groupNamePack), 0, (struct sockaddr *)&server_addr, addrlen)){\n\t\tERRLOG(\"sendto error\");\n\t\tclose(sockfd);\n\t\treturn -1;\n\t}\n\n\tstruct timeval tv;\n\ttv.tv_sec = 0;\n\ttv.tv_usec = 1000*100;\n\t\n\tfd_set rset;\n\tFD_ZERO(&rset);\n\tFD_SET(sockfd, &rset);\n\n\tint retsta = select(sockfd + 1, &rset, NULL, NULL, &tv);\n\tif(retsta < 0){\n\t\tERRLOG(\"select error\");\n\t\tclose(sockfd);\n\t\treturn -1;\n\t}else if (retsta > 0 && FD_ISSET(sockfd, &rset)){\n\t\tif(-1 == recvfrom(sockfd, masterIP, len, 0, NULL, NULL)){\n\t\t\tERRLOG(\"recvfrom error\");\n\t\t\tclose(sockfd);\n    \t\treturn -1;\n\t\t}\t\n\t}else{\n\t\tprintf(\"sendMsg don't receive\\n\");\n\t}\n    \n    close(sockfd);\n    return 0;\n}\nvoid* run(void* arg)\n{\n\twhile(true){\n\t\tscanMsg(\"192.168.1.255\", \"4000\", \"sjhdhasdhjshj\", \"this is my ip\");\n\t\tusleep(1000);\n\t}\n\treturn NULL;\n}\nint main(int argc, char const *argv[])\n{\n\tpthread_t tid;\n\tpthread_create(&tid, NULL, run, NULL);\n\t// pthread_join(tid, NULL);\n\n\tchar msIP[128] = {0};\n\tsendMsg(\"192.168.1.255\", \"4000\", \"sjhdhasdhjshj\", msIP, 128);\n\t\n\tif(strlen(msIP)){\n\t\tprintf(\"msIP:%s\\n\", msIP);\n\t}\n\tusleep(1000);\n\treturn 0;\n}\n\n```","slug":"广播数据扫描和发送","published":true,"updated":"2022-08-31T05:45:42.637Z","_id":"cm8339611001ri0q6etcm5zof","comments":true,"layout":"post","photos":[],"html":"<p>广播数据扫描和发送</p>\n<span id=\"more\"></span>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netinet/ip.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/select.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ERRLOG(errmsg) do&#123;\\</span></span><br><span class=\"line\"><span class=\"meta\">                perror(errmsg);\\</span></span><br><span class=\"line\"><span class=\"meta\">                printf(<span class=\"string\">&quot;%s--%s(%d)\\n&quot;</span>, __FILE__, __func__, __LINE__);\\</span></span><br><span class=\"line\"><span class=\"meta\">                exit(-1);\\</span></span><br><span class=\"line\"><span class=\"meta\">            &#125;while(0)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">scanMsg</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* ip, <span class=\"type\">const</span> <span class=\"type\">char</span>* port, <span class=\"type\">const</span> <span class=\"type\">char</span>* groupNamePack, <span class=\"type\">const</span> <span class=\"type\">char</span>* masterIP)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sockfd = socket(AF_INET, SOCK_DGRAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == sockfd)&#123;</span><br><span class=\"line\">        ERRLOG(<span class=\"string\">&quot;socket error&quot;</span>);</span><br><span class=\"line\">\t\tclose(sockfd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">server_addr</span>;</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(server_addr));</span><br><span class=\"line\"></span><br><span class=\"line\">    server_addr.sin_family = AF_INET;</span><br><span class=\"line\">    server_addr.sin_port = htons(atoi(port));</span><br><span class=\"line\">    server_addr.sin_addr.s_addr = inet_addr(ip);</span><br><span class=\"line\">    <span class=\"type\">socklen_t</span> addrlen = <span class=\"keyword\">sizeof</span>(server_addr);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == bind(sockfd, (<span class=\"keyword\">struct</span> sockaddr *)&amp;server_addr, addrlen))&#123;</span><br><span class=\"line\">        ERRLOG(<span class=\"string\">&quot;bind error&quot;</span>);</span><br><span class=\"line\">\t\tclose(sockfd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">client_addr</span>;</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(client_addr));</span><br><span class=\"line\">    <span class=\"type\">socklen_t</span> clientaddrlen = <span class=\"keyword\">sizeof</span>(client_addr);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">char</span> buff[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tfd_set rset;</span><br><span class=\"line\">\tFD_ZERO(&amp;rset);</span><br><span class=\"line\">\tFD_SET(sockfd, &amp;rset);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">tv</span>;</span></span><br><span class=\"line\">\ttv.tv_sec = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ttv.tv_usec = <span class=\"number\">100</span>*<span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> retsta = select(sockfd + <span class=\"number\">1</span>, &amp;rset, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;tv);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(retsta &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\tERRLOG(<span class=\"string\">&quot;select error&quot;</span>);</span><br><span class=\"line\">\t\tclose(sockfd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (retsta &gt; <span class=\"number\">0</span> &amp;&amp; FD_ISSET(sockfd, &amp;rset))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == recvfrom(sockfd, buff, <span class=\"number\">128</span>, <span class=\"number\">0</span>, (<span class=\"keyword\">struct</span> sockaddr *)&amp;client_addr, &amp;clientaddrlen))&#123;</span><br><span class=\"line\">\t\t\tERRLOG(<span class=\"string\">&quot;recvfrom error&quot;</span>);</span><br><span class=\"line\">\t\t\tclose(sockfd);</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s(%d):%s\\n&quot;</span>, inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port), buff);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(buff, groupNamePack) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//发送应答信息</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == sendto(sockfd, masterIP, <span class=\"built_in\">strlen</span>(masterIP), <span class=\"number\">0</span>, (<span class=\"keyword\">struct</span> sockaddr *)&amp;client_addr, clientaddrlen))&#123;</span><br><span class=\"line\">\t\t\t\tERRLOG(<span class=\"string\">&quot;sendto error&quot;</span>);</span><br><span class=\"line\">\t\t\t\tclose(sockfd);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;scanMsg don&#x27;t receive mess\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tclose(sockfd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sendMsg</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* ip, <span class=\"type\">const</span> <span class=\"type\">char</span>* port, <span class=\"type\">const</span> <span class=\"type\">char</span>* groupNamePack, <span class=\"type\">char</span>* masterIP, <span class=\"type\">size_t</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sockfd = socket(AF_INET, SOCK_DGRAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == sockfd)&#123;</span><br><span class=\"line\">        ERRLOG(<span class=\"string\">&quot;socket error&quot;</span>);</span><br><span class=\"line\">\t\tclose(sockfd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//设置套接字允许发送广播</span></span><br><span class=\"line\">    <span class=\"type\">int</span> on = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == setsockopt(sockfd, SOL_SOCKET, SO_BROADCAST, &amp;on, <span class=\"keyword\">sizeof</span>(on)))&#123;</span><br><span class=\"line\">        ERRLOG(<span class=\"string\">&quot;setsockopt error&quot;</span>);</span><br><span class=\"line\">\t\tclose(sockfd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">server_addr</span>;</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(server_addr));</span><br><span class=\"line\">    server_addr.sin_family = AF_INET;</span><br><span class=\"line\">    server_addr.sin_port = htons(atoi(port));</span><br><span class=\"line\">    server_addr.sin_addr.s_addr = inet_addr(ip);</span><br><span class=\"line\">    <span class=\"type\">socklen_t</span> addrlen = <span class=\"keyword\">sizeof</span>(server_addr);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == sendto(sockfd, groupNamePack, <span class=\"built_in\">strlen</span>(groupNamePack), <span class=\"number\">0</span>, (<span class=\"keyword\">struct</span> sockaddr *)&amp;server_addr, addrlen))&#123;</span><br><span class=\"line\">\t\tERRLOG(<span class=\"string\">&quot;sendto error&quot;</span>);</span><br><span class=\"line\">\t\tclose(sockfd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">tv</span>;</span></span><br><span class=\"line\">\ttv.tv_sec = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ttv.tv_usec = <span class=\"number\">1000</span>*<span class=\"number\">100</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfd_set rset;</span><br><span class=\"line\">\tFD_ZERO(&amp;rset);</span><br><span class=\"line\">\tFD_SET(sockfd, &amp;rset);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> retsta = select(sockfd + <span class=\"number\">1</span>, &amp;rset, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;tv);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(retsta &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\tERRLOG(<span class=\"string\">&quot;select error&quot;</span>);</span><br><span class=\"line\">\t\tclose(sockfd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (retsta &gt; <span class=\"number\">0</span> &amp;&amp; FD_ISSET(sockfd, &amp;rset))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == recvfrom(sockfd, masterIP, len, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>))&#123;</span><br><span class=\"line\">\t\t\tERRLOG(<span class=\"string\">&quot;recvfrom error&quot;</span>);</span><br><span class=\"line\">\t\t\tclose(sockfd);</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sendMsg don&#x27;t receive\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    close(sockfd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span>* <span class=\"title function_\">run</span><span class=\"params\">(<span class=\"type\">void</span>* arg)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">\t\tscanMsg(<span class=\"string\">&quot;192.168.1.255&quot;</span>, <span class=\"string\">&quot;4000&quot;</span>, <span class=\"string\">&quot;sjhdhasdhjshj&quot;</span>, <span class=\"string\">&quot;this is my ip&quot;</span>);</span><br><span class=\"line\">\t\tusleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">pthread_t</span> tid;</span><br><span class=\"line\">\tpthread_create(&amp;tid, <span class=\"literal\">NULL</span>, run, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// pthread_join(tid, NULL);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span> msIP[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tsendMsg(<span class=\"string\">&quot;192.168.1.255&quot;</span>, <span class=\"string\">&quot;4000&quot;</span>, <span class=\"string\">&quot;sjhdhasdhjshj&quot;</span>, msIP, <span class=\"number\">128</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(msIP))&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;msIP:%s\\n&quot;</span>, msIP);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tusleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","excerpt":"<p>广播数据扫描和发送</p>","more":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netinet/ip.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/select.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ERRLOG(errmsg) do&#123;\\</span></span><br><span class=\"line\"><span class=\"meta\">                perror(errmsg);\\</span></span><br><span class=\"line\"><span class=\"meta\">                printf(<span class=\"string\">&quot;%s--%s(%d)\\n&quot;</span>, __FILE__, __func__, __LINE__);\\</span></span><br><span class=\"line\"><span class=\"meta\">                exit(-1);\\</span></span><br><span class=\"line\"><span class=\"meta\">            &#125;while(0)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">scanMsg</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* ip, <span class=\"type\">const</span> <span class=\"type\">char</span>* port, <span class=\"type\">const</span> <span class=\"type\">char</span>* groupNamePack, <span class=\"type\">const</span> <span class=\"type\">char</span>* masterIP)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sockfd = socket(AF_INET, SOCK_DGRAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == sockfd)&#123;</span><br><span class=\"line\">        ERRLOG(<span class=\"string\">&quot;socket error&quot;</span>);</span><br><span class=\"line\">\t\tclose(sockfd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">server_addr</span>;</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(server_addr));</span><br><span class=\"line\"></span><br><span class=\"line\">    server_addr.sin_family = AF_INET;</span><br><span class=\"line\">    server_addr.sin_port = htons(atoi(port));</span><br><span class=\"line\">    server_addr.sin_addr.s_addr = inet_addr(ip);</span><br><span class=\"line\">    <span class=\"type\">socklen_t</span> addrlen = <span class=\"keyword\">sizeof</span>(server_addr);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == bind(sockfd, (<span class=\"keyword\">struct</span> sockaddr *)&amp;server_addr, addrlen))&#123;</span><br><span class=\"line\">        ERRLOG(<span class=\"string\">&quot;bind error&quot;</span>);</span><br><span class=\"line\">\t\tclose(sockfd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">client_addr</span>;</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(client_addr));</span><br><span class=\"line\">    <span class=\"type\">socklen_t</span> clientaddrlen = <span class=\"keyword\">sizeof</span>(client_addr);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">char</span> buff[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tfd_set rset;</span><br><span class=\"line\">\tFD_ZERO(&amp;rset);</span><br><span class=\"line\">\tFD_SET(sockfd, &amp;rset);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">tv</span>;</span></span><br><span class=\"line\">\ttv.tv_sec = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ttv.tv_usec = <span class=\"number\">100</span>*<span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> retsta = select(sockfd + <span class=\"number\">1</span>, &amp;rset, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;tv);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(retsta &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\tERRLOG(<span class=\"string\">&quot;select error&quot;</span>);</span><br><span class=\"line\">\t\tclose(sockfd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (retsta &gt; <span class=\"number\">0</span> &amp;&amp; FD_ISSET(sockfd, &amp;rset))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == recvfrom(sockfd, buff, <span class=\"number\">128</span>, <span class=\"number\">0</span>, (<span class=\"keyword\">struct</span> sockaddr *)&amp;client_addr, &amp;clientaddrlen))&#123;</span><br><span class=\"line\">\t\t\tERRLOG(<span class=\"string\">&quot;recvfrom error&quot;</span>);</span><br><span class=\"line\">\t\t\tclose(sockfd);</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s(%d):%s\\n&quot;</span>, inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port), buff);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(buff, groupNamePack) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//发送应答信息</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == sendto(sockfd, masterIP, <span class=\"built_in\">strlen</span>(masterIP), <span class=\"number\">0</span>, (<span class=\"keyword\">struct</span> sockaddr *)&amp;client_addr, clientaddrlen))&#123;</span><br><span class=\"line\">\t\t\t\tERRLOG(<span class=\"string\">&quot;sendto error&quot;</span>);</span><br><span class=\"line\">\t\t\t\tclose(sockfd);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;scanMsg don&#x27;t receive mess\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tclose(sockfd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sendMsg</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* ip, <span class=\"type\">const</span> <span class=\"type\">char</span>* port, <span class=\"type\">const</span> <span class=\"type\">char</span>* groupNamePack, <span class=\"type\">char</span>* masterIP, <span class=\"type\">size_t</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sockfd = socket(AF_INET, SOCK_DGRAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == sockfd)&#123;</span><br><span class=\"line\">        ERRLOG(<span class=\"string\">&quot;socket error&quot;</span>);</span><br><span class=\"line\">\t\tclose(sockfd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//设置套接字允许发送广播</span></span><br><span class=\"line\">    <span class=\"type\">int</span> on = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == setsockopt(sockfd, SOL_SOCKET, SO_BROADCAST, &amp;on, <span class=\"keyword\">sizeof</span>(on)))&#123;</span><br><span class=\"line\">        ERRLOG(<span class=\"string\">&quot;setsockopt error&quot;</span>);</span><br><span class=\"line\">\t\tclose(sockfd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">server_addr</span>;</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(server_addr));</span><br><span class=\"line\">    server_addr.sin_family = AF_INET;</span><br><span class=\"line\">    server_addr.sin_port = htons(atoi(port));</span><br><span class=\"line\">    server_addr.sin_addr.s_addr = inet_addr(ip);</span><br><span class=\"line\">    <span class=\"type\">socklen_t</span> addrlen = <span class=\"keyword\">sizeof</span>(server_addr);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == sendto(sockfd, groupNamePack, <span class=\"built_in\">strlen</span>(groupNamePack), <span class=\"number\">0</span>, (<span class=\"keyword\">struct</span> sockaddr *)&amp;server_addr, addrlen))&#123;</span><br><span class=\"line\">\t\tERRLOG(<span class=\"string\">&quot;sendto error&quot;</span>);</span><br><span class=\"line\">\t\tclose(sockfd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">tv</span>;</span></span><br><span class=\"line\">\ttv.tv_sec = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ttv.tv_usec = <span class=\"number\">1000</span>*<span class=\"number\">100</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfd_set rset;</span><br><span class=\"line\">\tFD_ZERO(&amp;rset);</span><br><span class=\"line\">\tFD_SET(sockfd, &amp;rset);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> retsta = select(sockfd + <span class=\"number\">1</span>, &amp;rset, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;tv);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(retsta &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\tERRLOG(<span class=\"string\">&quot;select error&quot;</span>);</span><br><span class=\"line\">\t\tclose(sockfd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (retsta &gt; <span class=\"number\">0</span> &amp;&amp; FD_ISSET(sockfd, &amp;rset))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == recvfrom(sockfd, masterIP, len, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>))&#123;</span><br><span class=\"line\">\t\t\tERRLOG(<span class=\"string\">&quot;recvfrom error&quot;</span>);</span><br><span class=\"line\">\t\t\tclose(sockfd);</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sendMsg don&#x27;t receive\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    close(sockfd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span>* <span class=\"title function_\">run</span><span class=\"params\">(<span class=\"type\">void</span>* arg)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">\t\tscanMsg(<span class=\"string\">&quot;192.168.1.255&quot;</span>, <span class=\"string\">&quot;4000&quot;</span>, <span class=\"string\">&quot;sjhdhasdhjshj&quot;</span>, <span class=\"string\">&quot;this is my ip&quot;</span>);</span><br><span class=\"line\">\t\tusleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">pthread_t</span> tid;</span><br><span class=\"line\">\tpthread_create(&amp;tid, <span class=\"literal\">NULL</span>, run, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// pthread_join(tid, NULL);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span> msIP[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tsendMsg(<span class=\"string\">&quot;192.168.1.255&quot;</span>, <span class=\"string\">&quot;4000&quot;</span>, <span class=\"string\">&quot;sjhdhasdhjshj&quot;</span>, msIP, <span class=\"number\">128</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(msIP))&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;msIP:%s\\n&quot;</span>, msIP);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tusleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","path":"2022/08/31/广播数据扫描和发送/","permalink":"http://chengs.run/2022/08/31/%E5%B9%BF%E6%92%AD%E6%95%B0%E6%8D%AE%E6%89%AB%E6%8F%8F%E5%92%8C%E5%8F%91%E9%80%81/","tags":[{"name":"linux应用开发","_id":"cm833960i000bi0q6eki8aqst","slug":"linux应用开发","path":"tags/linux应用开发/","permalink":"http://chengs.run/tags/linux%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/","length":4}],"categories":[],"prev":{"title":"grep的grouping","date":"2022-09-24T00:14:23.919Z","slug":"grep的grouping","published":true,"updated":"2022-09-24T00:20:02.801Z","_id":"cm833960o000ni0q6dt9dgerr","layout":"post","photos":[],"excerpt":"<p>grep的grouping</p>","path":"2022/09/24/grep的grouping/","permalink":"http://chengs.run/2022/09/24/grep%E7%9A%84grouping/","__post":true},"next":{"title":"树莓派挂swap、允许docker限制内存","date":"2022-06-27T13:44:28.622Z","slug":"树莓派挂swap、允许docker限制内存","published":true,"updated":"2022-10-19T12:10:35.712Z","_id":"cm8339612001wi0q60opa0tp9","layout":"post","photos":[],"excerpt":"<p>树莓派挂swap、允许docker限制内存</p>","path":"2022/06/27/树莓派挂swap、允许docker限制内存/","permalink":"http://chengs.run/2022/06/27/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%8C%82swap%E3%80%81%E5%85%81%E8%AE%B8docker%E9%99%90%E5%88%B6%E5%86%85%E5%AD%98/","__post":true},"__post":true}