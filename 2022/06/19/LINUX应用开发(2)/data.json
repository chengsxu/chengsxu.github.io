{"title":"linux应用开发(2)","date":"2022-06-19T11:36:06.277Z","source":"_posts/LINUX应用开发(2).md","raw":"---\ntitle: linux应用开发(2)\ndate: 2022-06-19 19:36:06.277\nupdated: 2022-06-19 19:37:02.018\ncategories: \ntags: \n- linux应用开发\n- linux\n---\nLinux应用开发\n<!-- more -->\n# Linux平台c语言应用开发\n## 1. linux文件底层系统调用\n   - open 获取一个文件描述符\n   - write\n   - read\n   - close\n   - 操作不区分文本，二进制\n```c\nint main(int argc, char *argv[], char *envp[])\n{\n    /*\n    int fd = open(\"file.txt\", O_WRONLY | O_CREAT, 0600);\n    assert( fd != -1);\n    printf(\"fd=%d\\n\", fd);\n\n    write(fd,\"hello\", 5);\n    close(fd);\n\n    int fd = open(\"file.txt\", O_RDONLY);\n    assert( fd != -1);\n    char buff[128] = {0};\n    int n = read(fd, buff, 127);\n    printf(\"n = %d,buff = %s\\n\", n, buff);\n    close(fd);\n    */\n\n    int fdr = open(\"1.png\", O_RDONLY);\n    int fdw = open(\"2.png\", O_WRONLY | O_CREAT, 0600);\n    assert( fdr != -1 && fdw != -1);\n    char buff[256] = {0};\n    int num = 0;\n    while( (num = read(fdr, buff, 256)) > 0 )\n    {\n        write(fdw, buff, num);\n    }\n    close(fdw);\n    close(fdr);\n    exit(0);\n}\n```\n## 2. 父子进程共享打开文件\n   - 父子进程共享文件偏移量\n   - 子进程可以访问父进程的文件\n   - 多个进程指向同一个struct file，需要在每个文件close\n   - 若先fork后打开文件，不会指向同一个struct file，每个进程有自己独立的struct file\n```c\nint main(int argc, char *argv[], char *envp[])\n{\n    int fd = open(\"file.txt\", O_RDONLY);\n    assert(fd != -1);\n    pid_t pid = fork();\n    assert(pid != -1);\n\n    if( pid == 0)\n    {\n        char buff[128] = {0};\n        int n = read(fd, buff, 1);\n        printf(\"child %s\\n\", buff);\n        sleep(1);\n        n = read(fd, buff, 1);\n        printf(\"child %s\\n\", buff);\n    }else\n    {\n        char buff[128] = {0};\n        int n = read(fd, buff, 1);\n        printf(\"parent %s\\n\", buff);\n        sleep(1);\n        n = read(fd, buff, 1);\n        printf(\"parent %s\\n\", buff);\n    }\n    close(fd);\n    exit(0);\n}\n```\n## 3. 系统调用和库函数区别\n   - 系统调用在内核中，属于内核空间；库函数的实现在库函数中，属于用户空间\n   - 某些库函数底层其实仍然是系统调用\n## 4. 内存申请与释放\n   - malloc()申请1G内存能否成功？\n     - malloc(单位是b) \n     - malloc申请的内存是虚拟内存，在实际使用的时候才会划分物理空间\n     - 分配1G能分配成功，申请内存数量应该小于剩余内存（memory+swap）\n   - 申请的内存如果没有释放会怎么样？\n     - 在程序退出时，内存依旧会被回收 \n## 5. exec进程替换\n   - linux系统交互都是一个fork和一个exec\n   - execl(const char *path, const char *arg, ... /* (char  *) NULL */);\n```c\nint main(int argc, char *argv[], char *envp[])\n{\n    printf(\"main pid = %d ppid = %d\\n\", getpid(), getppid());\n    pid_t pid = fork();\n    assert(pid != -1);\n\n    if(pid == 0)\n    {\n        printf(\"child pid=%d ppid=%d\\n\", getpid(), getppid());\n        execl(\"/bin/ps\", \"ps\", \"-f\", (char *)0);\n    }\n    wait(NULL);\n    exit(0);\n}\n```\n## 6. 信号\n   - 信号是系统响应某个条件而产生的事件，进程接收到信号会执行相应的操作\n   - 通过signal()设置相应的响应方式，可以设置以下几种响应方式\n     - 默认SIG_DEF\n     - 忽略SIG_IGN\n     - 自定义 void fun_sig(int sig)\n\n## 7. 实现自己的KILL命令\n   - kill 默认信号量是15\n   - 9号信号是不允许忽略的终止信号\n   - sscanf解析转化字符串\n```c\n#include <stdio.h>\nint sscanf(const char *str, const char *format, ...);\n//例程\nint year, month, day;\n \nint converted = sscanf(\"20191103\", \"%04d%02d%02d\", &year, &month, &day);\nprintf(\"converted=%d, year=%d, month=%d, day=%d/n\", converted, year, month, day);\n```\n```c\nint main(int argc, char *argv[])\n{\n    if (argc != 3)\n    {\n        printf(\"argc error\\n\");\n        exit(0);\n    }\n    int pid = 0;\n    int s = 0;\n    sscanf(argv[1], \"%d\", &pid);\n    sscanf(argv[2], \"%d\", &s);\n    printf(\"pid:%d signal:%d\\n\", pid, s);\n    kill(pid, s);\n    exit(0);\n}\n```\n## 8. 有名管道和无名管道\n   - 进程间通信方式：\n     - 管道，半双工\n       - 有名管道\n       - 无名管道\n     - 信号量\n     - 共享内存\n     - 消息队列\n     - 套接字\n   - 有/无名管道区别：\n     - 有名管道在任意两个进程间通信\n     - 无名管道在父子进程间通信\n   - 有名管道创建使用\n```sh\nchengs@ubuntu:~/test$ mkfifo fifo\nchengs@ubuntu:~/test$ ls -l\nprw-rw-r-- 1 chengs chengs     0 Jun 18 04:00 fifo\n```\n   - 管道只有O_RDONLY、O_WRONLY两种模式\n   - 管道文件只能两个进程同时打开，单个进程打开管道会阻塞 \n```c\n//write\nint main()\n{\n    int fd = open(\"fifo\", O_WRONLY);\n    assert(fd != -1);\n    printf(\"fd=%d\\n\", fd);\n    while(1)\n    {\n        printf(\"input:\\n\");\n        char buff[128] = {0};\n        fgets(buff,128, stdin);\n        if ( strncmp(buff, \"end\", 3 ) == 0 )\n        { \n            break;\n        }\n        write(fd, buff, strlen(buff));\n    }\n    close(fd);\n}\n//read\nint main()\n{\n    int fd = open(\"fifo\", O_RDONLY);\n    assert(fd != -1);\n    printf(\"fd=%d\\n\", fd);\n    char buff[128] = {0};\n    while (1)\n    {\n        if (read(fd, buff, 127) == 0 )\n        {\n            break;\n        }\n        printf(\"read: %s\", buff);\n    }\n    close(fd);\n}\n\n```\n   - 无名管道创建使用\n```c\nint main()\n{\n    int fd[2];\n    assert( pipe(fd) != -1); //fd[0] r, fd[1] w\n    \n    pid_t pid = fork();\n    assert( pid != -1);\n\n    if(pid == 0)\n    {\n        close(fd[1]);\n        char buff[128] = {0};\n        read(fd[0], buff, 127);\n        printf(\"child read:%s\\n\", buff);\n        close(fd[0]);\n    }\n    else\n    {\n        close(fd[0]);\n        printf(\"parent write:hello\\n\");\n        write(fd[1], \"hello\", 5);\n        close(fd[1]);\n    }\n```\n## 9.信号量\n信号量值代表允许访问的资源数目\n  - P 操作\n  - V 操作\n  - 临界资源：同一时刻，只允许被一个进程或线程访问的资源\n  - 临界区：访问临界资源的代码段\n  - ipcs/ipcrm命令查看和删除消息进程通信方式（消息队列、共享内存、信号量）\n```c\n//函数\nint semget(key_t key, int nsems, int semflg);\nint semop(int semid, struct sembuf *sops, unsigned nsops);\nint semctl(int semid, int semnum, int cmd, ...);\n// sem.h\nunion semun{\n    int val;\n};\n\nvoid sem_init();\nvoid sem_p();\nvoid sem_v();\nvoid sem_destroy();\n// sem.c\n#include \"sem.h\"\n\nstatic int semid = -1;\n\nvoid sem_init(){\n    semid = semget((key_t)1234, 1, IPC_CREAT|IPC_EXCL|0600);\n    if(semid == -1){\n        semid = semget((key_t)1234, 1, 0600);\n    }else{\n        union semun a;\n        a.val = 1;//信号量初始值\n        if( semctl(semid, 0, SETVAL, a) == -1 ){\n            perror(\"semctrl error\");\n        }\n    }\n}\nvoid sem_p(){\n    struct sembuf buf;\n    buf.sem_num = 0;\n    buf.sem_op = -1;\n    buf.sem_flg = SEM_UNDO;\n\n    if( semop(semid, &buf, 1) == -1 ){\n        perror(\"semop p error\");\n    }\n}\nvoid sem_v(){\n    struct sembuf buf;\n    buf.sem_num = 0;\n    buf.sem_op = 1;\n    buf.sem_flg = SEM_UNDO;\n    \n    if( semop(semid, &buf, 1) == -1 ){\n        perror(\"semop v error\");\n    }\n}\nvoid sem_destroy(){\n    if( semctl(semid, 0, IPC_RMID) == -1 ){\n        perror(\"semctrl del error\");\n    }\n}\n//a .c\n#include \"sem.h\"\n\nint main()\n{\n    sem_init();\n    for (size_t i = 0; i < 10; i++)\n    {\n        sem_p();\n        printf(\"a\");\n        fflush(stdout);\n        int n = rand()%3;\n        sleep(n);\n        printf(\"a\");\n        fflush(stdout);\n        sem_v();\n        n = rand()%3;\n        sleep(n);\n    }\n}\n// b.c\n#include \"sem.h\"\n\nint main()\n{\n    sem_init();\n    for (size_t i = 0; i < 10; i++)\n    {\n        sem_p();\n        printf(\"b\");\n        fflush(stdout);\n        int n = rand()%3;\n        sleep(n);\n        printf(\"b\");\n        fflush(stdout);\n        sem_v();\n        n = rand()%3;\n        sleep(n);\n    }\n}\n```\n## 10.共享内存\n  - 共享内存是先在物理内存上申请一块空间，多个进程可以将其映射到自己的虚拟地址空间中\n  - 并未提供同步机制，所以我们通常需要用其他的机制来同步对共享内存的访问。\n```c\nint shmget(key_t key, size_t size, int shmflg);\nvoid* shmat(int shmid, const void *shmaddr, int shmflg);\nint shmdt(const void *shmaddr);\nint shmctl(int shmid, int cmd, struct shmid_ds *buf);\n\n// sem.h \n#ifndef _SEM_H_\n#define _SEM_H_\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n#include <assert.h>\n#include <sys/sem.h>\n\nunion semun{\n    int val;\n};\n\nint sem_init(int key, int semVal[], int nsems);\nvoid sem_p(int semid, int index);\nvoid sem_v(int semid, int index);\nvoid sem_destroy(int semid);\n#endif\n// sem.c\n#include \"sem.h\"\n\nint sem_init(int key, int semVal[], int nsems){\n    int semid = semget((key_t)key, nsems, IPC_CREAT|IPC_EXCL|0664);\n    if(semid == -1){\n        semid = semget((key_t)key, nsems, 0664);\n    }else{\n        union semun a;\n        for (size_t i = 0; i < nsems; i++)\n        {\n            a.val = semVal[i];\n            if( semctl(semid, i, SETVAL, a) == -1 ){\n                perror(\"semctrl error\");\n            }\n        }\n    }\n    return semid;\n}\nvoid sem_p(int semid, int index){\n    struct sembuf buf;\n    buf.sem_num = index;\n    buf.sem_op = -1;\n    buf.sem_flg = SEM_UNDO;\n\n    if( semop(semid, &buf, 1) == -1 ){\n        perror(\"semop p error\");\n    }\n}\nvoid sem_v(int semid, int index){\n    struct sembuf buf;\n    buf.sem_num = index;\n    buf.sem_op = 1;\n    buf.sem_flg = SEM_UNDO;\n    \n    if( semop(semid, &buf, 1) == -1 ){\n        perror(\"semop v error\");\n    }\n}\nvoid sem_destroy(int semid){\n    if( semctl(semid, 0, IPC_RMID) == -1 ){\n        perror(\"semctrl del error\");\n    }\n}\n// a.c\n#include \"sem.h\"\n#include <sys/ipc.h>\n#include <sys/shm.h>\n\nint main()\n{\n    int shmid = shmget((key_t)1234, 128, IPC_CREAT|0664);\n    assert(shmid != -1);\n    \n    int sem[2] = {1, 0};\n    int semid = sem_init(1234, sem, 2);\n\n    char *p = (char *)shmat(shmid, NULL, 0);\n    assert(p != (char*)-1);\n\n    while (1)\n    {\n        char buff[128] = {0};\n        printf(\"please input:\");\n        fgets(buff, 128, stdin);\n        sem_p(semid, 0);\n        strcpy(p, buff);\n        sem_v(semid, 1);\n        if(strncmp(buff, \"end\", 3) == 0){\n            break;\n        }\n    }\n    shmdt(p);\n    shmctl(shmid, IPC_RMID, NULL);\n    exit(0);\n}\n\n// b.c\n#include \"sem.h\"\n#include <sys/ipc.h>\n#include <sys/shm.h>\n\nint main()\n{\n    int shmid = shmget((key_t)1234, 128, IPC_CREAT|0664);\n    assert(shmid != -1);\n    \n    int sem[2] = {1, 0};\n    int semid = sem_init(1234, sem, 2);\n\n    char *p = (char *)shmat(shmid, NULL, 0);\n    assert(p != (char*)-1);\n\n    while (1)\n    {\n        char buff[128] = {0};\n        \n        sem_p(semid, 1);\n        strcpy(buff, p);\n        if(strncmp(buff, \"end\", 3) == 0){\n            break;\n        }\n        printf(\"sent:%s\", buff);\n        fflush(stdout);\n        sem_v(semid, 0);\n        \n    }\n    shmdt(p);\n    shmctl(shmid, IPC_RMID, NULL);\n    sem_destroy(semid);\n    exit(0);\n}\n```\n## 11.消息队列\n```c\nint msgget(key_t key, int msqflg);\nint msgsnd(int msqid, const void *msqp, size_t msqsz, int msqflg);\nssize_t msgrcv(int msqid, void *msgp, size_t msqsz, long msqtyp, int msqflg);\nint msgctl(int msqid, int cmd, struct msqid_ds *buf);\n\n// a.c\ntypedef struct msgdata{\n    long mtype;\n    char mtext[128];\n}MsgData;\n\nint main()\n{\n    int msgid = msgget((key_t)1234, IPC_CREAT|0664);\n    assert(msgid != -1);\n\n    MsgData data;\n    memset(&data, 0, sizeof(data));\n    data.mtype = 1;\n    strcpy(data.mtext, \"hello\");\n    msgsnd(msgid, &data, 128, 0);\n\n    exit(0);\n}\n// b.c\ntypedef struct msgdata{\n    long mtype;\n    char mtext[128];\n}MsgData;\n\nint main()\n{\n    int msgid = msgget((key_t)1234, IPC_CREAT|0664);\n    assert(msgid != -1);\n\n    MsgData data;\n    memset(&data, 0, sizeof(data));\n    \n    msgrcv(msgid, &data, 128, 1, 0);\n    printf(\"id:%d, text:%s\", (int)data.mtype, data.mtext);\n    msgctl(msgid, IPC_RMID, NULL);\n    exit(0);\n}\n```\n## 12.线程\n   - 在操作系统中线程的实现有三种方式\n     - 内核级线程\n     - 用户级线程\n     - 组合级线程 \n   - 进程与线程的区别\n     - 进程是资源分配的最小单位，线程是 CPU 调度的最小单位\n     - 进程有自己的独立地址空间，线程共享进程中的地址空间\n     - 进程的创建消耗资源大，线程的创建相对较小\n     - 进程的切换开销大，线程的切换开销相对较小  \n   - 线程接口\n     - pthread不是 Linux 系统默认的库，编译中要加 -lpthread参数 \n```c\nint pthread_create(pthread_t *thread, const pthread_attr_t *attr,void *(*start_routine) (void *), void *arg);\nint pthread_exit(void *retval);\nint pthread_join(pthread_t thread, void **retval);\n\n// 例程\nvoid * fun(void * argv){\n    int *threadNum = (int*)argv;\n    for (size_t i = 0; i < 5; i++)\n    {\n        sleep(1);\n        printf(\"this thread is %d\\n\", *threadNum);\n    }\n    pthread_exit(threadNum);\n}\n\nint main()\n{\n    pthread_t t;\n    int *ret = NULL;\n    int a = 1;\n    assert( pthread_create(&t, NULL, fun, &a) != -1 );\n    assert( pthread_join(t, (void **)&ret) != -1 );\n\n    printf(\"return: %d\\n\", *ret);\n    exit(0);\n}\n```\n## 13.线程同步\n   - 互斥锁\n```c\nint pthread_mutex_init(pthread_mutex_t *mutex, pthread_mutexattr_t *attr);\nint pthread_mutex_lock(pthread_mutex_t *mutex);\nint pthread_mutex_unlock(pthread_mutex_t *mutex);\nint pthread_mutex_destroy(pthread_mutex_t *mutex);\n//例程\npthread_mutex_t mutex;\n\nvoid random_sleep(){\n    int n =  rand()%3;\n    sleep(n);\n}\nvoid * fun(void * argv){\n    for (size_t i = 0; i < 5; i++)\n    {\n        pthread_mutex_lock(&mutex);\n        printf(\"A\");\n        fflush(stdout);\n        random_sleep();\n        printf(\"A\\n\");\n        pthread_mutex_unlock(&mutex);\n        random_sleep();\n    }\n}\n\nint main()\n{\n    pthread_t t;\n    int *ret = NULL;\n    int a = 1;\n\n    pthread_mutex_init(&mutex, NULL);\n\n    assert( pthread_create(&t, NULL, fun, &a) != -1 );\n\n    for (size_t i = 0; i < 5; i++)\n    {\n        pthread_mutex_lock(&mutex);\n        printf(\"B\");\n        fflush(stdout);\n        random_sleep();\n        printf(\"B\\n\");\n        pthread_mutex_unlock(&mutex);\n        random_sleep();\n    }\n    pthread_mutex_destroy(&mutex);\n    exit(0);\n}\n```\n   - 信号量\n```c\nint sem_init(sem_t *sem, int pshared, unsigned int value);\nint sem_wait(sem_t *sem);\nint sem_post(sem_t *sem);\nint sem_destroy(sem_t *sem);\n```\n   - 条件变量\n     - 条件变量提供了一种线程间的通知机制：当某个共享数据达到某个值的时候，唤醒等待这个共享数据的线程\n```c\nint pthread_cond_init(pthread_cond_t *cond, pthread_condattr_t *attr);\nint pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex);\nint pthread_cond_signal(pthread_cond_t *cond); //唤醒单个线程\nint pthread_cond_broadcast(pthread_cond_t *cond); //唤醒所有等待的线程\nint pthread_cond_destroy(pthread_cond_t *cond);\n```\n   - 读写锁\n```c\nint pthread_rwlock_init(pthread_rwlock_t *rwlock, pthread_rwlockattr_t *attr);\nint pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);\nint pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);\nint pthread_rwlock_unlock(pthread_rwlock_t *rwlock);\nint pthread_rwlock_destroy(pthread_rwlock_t *rwlock);\n```\n## 14.线程安全\n-  对线程同步，保证同一时刻只有一个线程访问临界资源。\n-  在多线程中使用线程安全的函数（可重入函数），所谓线程安全的函数指的是：如果一个\n函数能被多个线程同时调用且不发生竟态条件，则我们称它是线程安全的。\n- char *strtok(char *str, const char *delim)//分割字符串\n  - strtok就是线程不安全的，该函数内部存放一个指针静态变量，如果多线程同时使用该指针就会导致线程不安全\n  - 采用strok_r函数是线程安全的 \n## 15.线程fork\n- 多线程种如果子线程fork，只会复制该子线程，其他子线程不会复制\n\n","slug":"LINUX应用开发(2)","published":true,"updated":"2022-06-19T11:37:02.018Z","_id":"cm833960d0003i0q6h1vo40ub","comments":true,"layout":"post","photos":[],"html":"<p>Linux应用开发</p>\n<span id=\"more\"></span>\n<h1 id=\"Linux平台c语言应用开发\"><a href=\"#Linux平台c语言应用开发\" class=\"headerlink\" title=\"Linux平台c语言应用开发\"></a>Linux平台c语言应用开发</h1><h2 id=\"1-linux文件底层系统调用\"><a href=\"#1-linux文件底层系统调用\" class=\"headerlink\" title=\"1. linux文件底层系统调用\"></a>1. linux文件底层系统调用</h2><ul>\n<li>open 获取一个文件描述符</li>\n<li>write</li>\n<li>read</li>\n<li>close</li>\n<li>操作不区分文本，二进制</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[], <span class=\"type\">char</span> *envp[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    int fd = open(&quot;file.txt&quot;, O_WRONLY | O_CREAT, 0600);</span></span><br><span class=\"line\"><span class=\"comment\">    assert( fd != -1);</span></span><br><span class=\"line\"><span class=\"comment\">    printf(&quot;fd=%d\\n&quot;, fd);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    write(fd,&quot;hello&quot;, 5);</span></span><br><span class=\"line\"><span class=\"comment\">    close(fd);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    int fd = open(&quot;file.txt&quot;, O_RDONLY);</span></span><br><span class=\"line\"><span class=\"comment\">    assert( fd != -1);</span></span><br><span class=\"line\"><span class=\"comment\">    char buff[128] = &#123;0&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">    int n = read(fd, buff, 127);</span></span><br><span class=\"line\"><span class=\"comment\">    printf(&quot;n = %d,buff = %s\\n&quot;, n, buff);</span></span><br><span class=\"line\"><span class=\"comment\">    close(fd);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> fdr = open(<span class=\"string\">&quot;1.png&quot;</span>, O_RDONLY);</span><br><span class=\"line\">    <span class=\"type\">int</span> fdw = open(<span class=\"string\">&quot;2.png&quot;</span>, O_WRONLY | O_CREAT, <span class=\"number\">0600</span>);</span><br><span class=\"line\">    assert( fdr != <span class=\"number\">-1</span> &amp;&amp; fdw != <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"type\">char</span> buff[<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( (num = read(fdr, buff, <span class=\"number\">256</span>)) &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        write(fdw, buff, num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    close(fdw);</span><br><span class=\"line\">    close(fdr);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-父子进程共享打开文件\"><a href=\"#2-父子进程共享打开文件\" class=\"headerlink\" title=\"2. 父子进程共享打开文件\"></a>2. 父子进程共享打开文件</h2><ul>\n<li>父子进程共享文件偏移量</li>\n<li>子进程可以访问父进程的文件</li>\n<li>多个进程指向同一个struct file，需要在每个文件close</li>\n<li>若先fork后打开文件，不会指向同一个struct file，每个进程有自己独立的struct file</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[], <span class=\"type\">char</span> *envp[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;file.txt&quot;</span>, O_RDONLY);</span><br><span class=\"line\">    assert(fd != <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"type\">pid_t</span> pid = fork();</span><br><span class=\"line\">    assert(pid != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( pid == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> buff[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = read(fd, buff, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child %s\\n&quot;</span>, buff);</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        n = read(fd, buff, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child %s\\n&quot;</span>, buff);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> buff[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = read(fd, buff, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;parent %s\\n&quot;</span>, buff);</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        n = read(fd, buff, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;parent %s\\n&quot;</span>, buff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-系统调用和库函数区别\"><a href=\"#3-系统调用和库函数区别\" class=\"headerlink\" title=\"3. 系统调用和库函数区别\"></a>3. 系统调用和库函数区别</h2><ul>\n<li>系统调用在内核中，属于内核空间；库函数的实现在库函数中，属于用户空间</li>\n<li>某些库函数底层其实仍然是系统调用</li>\n</ul>\n<h2 id=\"4-内存申请与释放\"><a href=\"#4-内存申请与释放\" class=\"headerlink\" title=\"4. 内存申请与释放\"></a>4. 内存申请与释放</h2><ul>\n<li>malloc()申请1G内存能否成功？<ul>\n<li>malloc(单位是b) </li>\n<li>malloc申请的内存是虚拟内存，在实际使用的时候才会划分物理空间</li>\n<li>分配1G能分配成功，申请内存数量应该小于剩余内存（memory+swap）</li>\n</ul>\n</li>\n<li>申请的内存如果没有释放会怎么样？<ul>\n<li>在程序退出时，内存依旧会被回收</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-exec进程替换\"><a href=\"#5-exec进程替换\" class=\"headerlink\" title=\"5. exec进程替换\"></a>5. exec进程替换</h2><ul>\n<li>linux系统交互都是一个fork和一个exec</li>\n<li>execl(const char *path, const char <em>arg, … &#x2F;</em> (char  *) NULL *&#x2F;);</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[], <span class=\"type\">char</span> *envp[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;main pid = %d ppid = %d\\n&quot;</span>, getpid(), getppid());</span><br><span class=\"line\">    <span class=\"type\">pid_t</span> pid = fork();</span><br><span class=\"line\">    assert(pid != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pid == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child pid=%d ppid=%d\\n&quot;</span>, getpid(), getppid());</span><br><span class=\"line\">        execl(<span class=\"string\">&quot;/bin/ps&quot;</span>, <span class=\"string\">&quot;ps&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, (<span class=\"type\">char</span> *)<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    wait(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-信号\"><a href=\"#6-信号\" class=\"headerlink\" title=\"6. 信号\"></a>6. 信号</h2><ul>\n<li>信号是系统响应某个条件而产生的事件，进程接收到信号会执行相应的操作</li>\n<li>通过signal()设置相应的响应方式，可以设置以下几种响应方式<ul>\n<li>默认SIG_DEF</li>\n<li>忽略SIG_IGN</li>\n<li>自定义 void fun_sig(int sig)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7-实现自己的KILL命令\"><a href=\"#7-实现自己的KILL命令\" class=\"headerlink\" title=\"7. 实现自己的KILL命令\"></a>7. 实现自己的KILL命令</h2><ul>\n<li>kill 默认信号量是15</li>\n<li>9号信号是不允许忽略的终止信号</li>\n<li>sscanf解析转化字符串</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sscanf</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span>;</span><br><span class=\"line\"><span class=\"comment\">//例程</span></span><br><span class=\"line\"><span class=\"type\">int</span> year, month, day;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> converted = <span class=\"built_in\">sscanf</span>(<span class=\"string\">&quot;20191103&quot;</span>, <span class=\"string\">&quot;%04d%02d%02d&quot;</span>, &amp;year, &amp;month, &amp;day);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;converted=%d, year=%d, month=%d, day=%d/n&quot;</span>, converted, year, month, day);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc != <span class=\"number\">3</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;argc error\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> pid = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sscanf</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;%d&quot;</span>, &amp;pid);</span><br><span class=\"line\">    <span class=\"built_in\">sscanf</span>(argv[<span class=\"number\">2</span>], <span class=\"string\">&quot;%d&quot;</span>, &amp;s);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;pid:%d signal:%d\\n&quot;</span>, pid, s);</span><br><span class=\"line\">    kill(pid, s);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-有名管道和无名管道\"><a href=\"#8-有名管道和无名管道\" class=\"headerlink\" title=\"8. 有名管道和无名管道\"></a>8. 有名管道和无名管道</h2><ul>\n<li>进程间通信方式：<ul>\n<li>管道，半双工<ul>\n<li>有名管道</li>\n<li>无名管道</li>\n</ul>\n</li>\n<li>信号量</li>\n<li>共享内存</li>\n<li>消息队列</li>\n<li>套接字</li>\n</ul>\n</li>\n<li>有&#x2F;无名管道区别：<ul>\n<li>有名管道在任意两个进程间通信</li>\n<li>无名管道在父子进程间通信</li>\n</ul>\n</li>\n<li>有名管道创建使用</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chengs@ubuntu:~/test$ <span class=\"built_in\">mkfifo</span> fifo</span><br><span class=\"line\">chengs@ubuntu:~/test$ <span class=\"built_in\">ls</span> -l</span><br><span class=\"line\">prw-rw-r-- 1 chengs chengs     0 Jun 18 04:00 fifo</span><br></pre></td></tr></table></figure>\n<ul>\n<li>管道只有O_RDONLY、O_WRONLY两种模式</li>\n<li>管道文件只能两个进程同时打开，单个进程打开管道会阻塞</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//write</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;fifo&quot;</span>, O_WRONLY);</span><br><span class=\"line\">    assert(fd != <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fd=%d\\n&quot;</span>, fd);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;input:\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">char</span> buff[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        fgets(buff,<span class=\"number\">128</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"built_in\">strncmp</span>(buff, <span class=\"string\">&quot;end&quot;</span>, <span class=\"number\">3</span> ) == <span class=\"number\">0</span> )</span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        write(fd, buff, <span class=\"built_in\">strlen</span>(buff));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//read</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;fifo&quot;</span>, O_RDONLY);</span><br><span class=\"line\">    assert(fd != <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fd=%d\\n&quot;</span>, fd);</span><br><span class=\"line\">    <span class=\"type\">char</span> buff[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read(fd, buff, <span class=\"number\">127</span>) == <span class=\"number\">0</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;read: %s&quot;</span>, buff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>无名管道创建使用</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd[<span class=\"number\">2</span>];</span><br><span class=\"line\">    assert( pipe(fd) != <span class=\"number\">-1</span>); <span class=\"comment\">//fd[0] r, fd[1] w</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">pid_t</span> pid = fork();</span><br><span class=\"line\">    assert( pid != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pid == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        close(fd[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"type\">char</span> buff[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        read(fd[<span class=\"number\">0</span>], buff, <span class=\"number\">127</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child read:%s\\n&quot;</span>, buff);</span><br><span class=\"line\">        close(fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        close(fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;parent write:hello\\n&quot;</span>);</span><br><span class=\"line\">        write(fd[<span class=\"number\">1</span>], <span class=\"string\">&quot;hello&quot;</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">        close(fd[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-信号量\"><a href=\"#9-信号量\" class=\"headerlink\" title=\"9.信号量\"></a>9.信号量</h2><p>信号量值代表允许访问的资源数目</p>\n<ul>\n<li>P 操作</li>\n<li>V 操作</li>\n<li>临界资源：同一时刻，只允许被一个进程或线程访问的资源</li>\n<li>临界区：访问临界资源的代码段</li>\n<li>ipcs&#x2F;ipcrm命令查看和删除消息进程通信方式（消息队列、共享内存、信号量）</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">semget</span><span class=\"params\">(<span class=\"type\">key_t</span> key, <span class=\"type\">int</span> nsems, <span class=\"type\">int</span> semflg)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">semop</span><span class=\"params\">(<span class=\"type\">int</span> semid, <span class=\"keyword\">struct</span> sembuf *sops, <span class=\"type\">unsigned</span> nsops)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">semctl</span><span class=\"params\">(<span class=\"type\">int</span> semid, <span class=\"type\">int</span> semnum, <span class=\"type\">int</span> cmd, ...)</span>;</span><br><span class=\"line\"><span class=\"comment\">// sem.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">semun</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_init</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_p</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_v</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_destroy</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">// sem.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sem.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> semid = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_init</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    semid = semget((<span class=\"type\">key_t</span>)<span class=\"number\">1234</span>, <span class=\"number\">1</span>, IPC_CREAT|IPC_EXCL|<span class=\"number\">0600</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(semid == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        semid = semget((<span class=\"type\">key_t</span>)<span class=\"number\">1234</span>, <span class=\"number\">1</span>, <span class=\"number\">0600</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">union</span> semun a;</span><br><span class=\"line\">        a.val = <span class=\"number\">1</span>;<span class=\"comment\">//信号量初始值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( semctl(semid, <span class=\"number\">0</span>, SETVAL, a) == <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">            perror(<span class=\"string\">&quot;semctrl error&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_p</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sembuf</span> <span class=\"title\">buf</span>;</span></span><br><span class=\"line\">    buf.sem_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    buf.sem_op = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    buf.sem_flg = SEM_UNDO;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( semop(semid, &amp;buf, <span class=\"number\">1</span>) == <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;semop p error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_v</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sembuf</span> <span class=\"title\">buf</span>;</span></span><br><span class=\"line\">    buf.sem_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    buf.sem_op = <span class=\"number\">1</span>;</span><br><span class=\"line\">    buf.sem_flg = SEM_UNDO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>( semop(semid, &amp;buf, <span class=\"number\">1</span>) == <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;semop v error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_destroy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( semctl(semid, <span class=\"number\">0</span>, IPC_RMID) == <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;semctrl del error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//a .c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sem.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    sem_init();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sem_p();</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> n = rand()%<span class=\"number\">3</span>;</span><br><span class=\"line\">        sleep(n);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        sem_v();</span><br><span class=\"line\">        n = rand()%<span class=\"number\">3</span>;</span><br><span class=\"line\">        sleep(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// b.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sem.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    sem_init();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sem_p();</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> n = rand()%<span class=\"number\">3</span>;</span><br><span class=\"line\">        sleep(n);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        sem_v();</span><br><span class=\"line\">        n = rand()%<span class=\"number\">3</span>;</span><br><span class=\"line\">        sleep(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-共享内存\"><a href=\"#10-共享内存\" class=\"headerlink\" title=\"10.共享内存\"></a>10.共享内存</h2><ul>\n<li>共享内存是先在物理内存上申请一块空间，多个进程可以将其映射到自己的虚拟地址空间中</li>\n<li>并未提供同步机制，所以我们通常需要用其他的机制来同步对共享内存的访问。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">shmget</span><span class=\"params\">(<span class=\"type\">key_t</span> key, <span class=\"type\">size_t</span> size, <span class=\"type\">int</span> shmflg)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span>* <span class=\"title function_\">shmat</span><span class=\"params\">(<span class=\"type\">int</span> shmid, <span class=\"type\">const</span> <span class=\"type\">void</span> *shmaddr, <span class=\"type\">int</span> shmflg)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">shmdt</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span> *shmaddr)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">shmctl</span><span class=\"params\">(<span class=\"type\">int</span> shmid, <span class=\"type\">int</span> cmd, <span class=\"keyword\">struct</span> shmid_ds *buf)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sem.h </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> _SEM_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _SEM_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/sem.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">semun</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sem_init</span><span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> semVal[], <span class=\"type\">int</span> nsems)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_p</span><span class=\"params\">(<span class=\"type\">int</span> semid, <span class=\"type\">int</span> index)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_v</span><span class=\"params\">(<span class=\"type\">int</span> semid, <span class=\"type\">int</span> index)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_destroy</span><span class=\"params\">(<span class=\"type\">int</span> semid)</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"comment\">// sem.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sem.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sem_init</span><span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> semVal[], <span class=\"type\">int</span> nsems)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> semid = semget((<span class=\"type\">key_t</span>)key, nsems, IPC_CREAT|IPC_EXCL|<span class=\"number\">0664</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(semid == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        semid = semget((<span class=\"type\">key_t</span>)key, nsems, <span class=\"number\">0664</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">union</span> semun a;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; nsems; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a.val = semVal[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( semctl(semid, i, SETVAL, a) == <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">                perror(<span class=\"string\">&quot;semctrl error&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> semid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_p</span><span class=\"params\">(<span class=\"type\">int</span> semid, <span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sembuf</span> <span class=\"title\">buf</span>;</span></span><br><span class=\"line\">    buf.sem_num = index;</span><br><span class=\"line\">    buf.sem_op = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    buf.sem_flg = SEM_UNDO;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( semop(semid, &amp;buf, <span class=\"number\">1</span>) == <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;semop p error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_v</span><span class=\"params\">(<span class=\"type\">int</span> semid, <span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sembuf</span> <span class=\"title\">buf</span>;</span></span><br><span class=\"line\">    buf.sem_num = index;</span><br><span class=\"line\">    buf.sem_op = <span class=\"number\">1</span>;</span><br><span class=\"line\">    buf.sem_flg = SEM_UNDO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>( semop(semid, &amp;buf, <span class=\"number\">1</span>) == <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;semop v error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_destroy</span><span class=\"params\">(<span class=\"type\">int</span> semid)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( semctl(semid, <span class=\"number\">0</span>, IPC_RMID) == <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;semctrl del error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sem.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ipc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/shm.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> shmid = shmget((<span class=\"type\">key_t</span>)<span class=\"number\">1234</span>, <span class=\"number\">128</span>, IPC_CREAT|<span class=\"number\">0664</span>);</span><br><span class=\"line\">    assert(shmid != <span class=\"number\">-1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> sem[<span class=\"number\">2</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> semid = sem_init(<span class=\"number\">1234</span>, sem, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *p = (<span class=\"type\">char</span> *)shmat(shmid, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    assert(p != (<span class=\"type\">char</span>*)<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> buff[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;please input:&quot;</span>);</span><br><span class=\"line\">        fgets(buff, <span class=\"number\">128</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">        sem_p(semid, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(p, buff);</span><br><span class=\"line\">        sem_v(semid, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">strncmp</span>(buff, <span class=\"string\">&quot;end&quot;</span>, <span class=\"number\">3</span>) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    shmdt(p);</span><br><span class=\"line\">    shmctl(shmid, IPC_RMID, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sem.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ipc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/shm.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> shmid = shmget((<span class=\"type\">key_t</span>)<span class=\"number\">1234</span>, <span class=\"number\">128</span>, IPC_CREAT|<span class=\"number\">0664</span>);</span><br><span class=\"line\">    assert(shmid != <span class=\"number\">-1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> sem[<span class=\"number\">2</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> semid = sem_init(<span class=\"number\">1234</span>, sem, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *p = (<span class=\"type\">char</span> *)shmat(shmid, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    assert(p != (<span class=\"type\">char</span>*)<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> buff[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        sem_p(semid, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(buff, p);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">strncmp</span>(buff, <span class=\"string\">&quot;end&quot;</span>, <span class=\"number\">3</span>) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sent:%s&quot;</span>, buff);</span><br><span class=\"line\">        fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        sem_v(semid, <span class=\"number\">0</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    shmdt(p);</span><br><span class=\"line\">    shmctl(shmid, IPC_RMID, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    sem_destroy(semid);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-消息队列\"><a href=\"#11-消息队列\" class=\"headerlink\" title=\"11.消息队列\"></a>11.消息队列</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">msgget</span><span class=\"params\">(<span class=\"type\">key_t</span> key, <span class=\"type\">int</span> msqflg)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">msgsnd</span><span class=\"params\">(<span class=\"type\">int</span> msqid, <span class=\"type\">const</span> <span class=\"type\">void</span> *msqp, <span class=\"type\">size_t</span> msqsz, <span class=\"type\">int</span> msqflg)</span>;</span><br><span class=\"line\"><span class=\"type\">ssize_t</span> <span class=\"title function_\">msgrcv</span><span class=\"params\">(<span class=\"type\">int</span> msqid, <span class=\"type\">void</span> *msgp, <span class=\"type\">size_t</span> msqsz, <span class=\"type\">long</span> msqtyp, <span class=\"type\">int</span> msqflg)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">msgctl</span><span class=\"params\">(<span class=\"type\">int</span> msqid, <span class=\"type\">int</span> cmd, <span class=\"keyword\">struct</span> msqid_ds *buf)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a.c</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msgdata</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">long</span> mtype;</span><br><span class=\"line\">    <span class=\"type\">char</span> mtext[<span class=\"number\">128</span>];</span><br><span class=\"line\">&#125;MsgData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> msgid = msgget((<span class=\"type\">key_t</span>)<span class=\"number\">1234</span>, IPC_CREAT|<span class=\"number\">0664</span>);</span><br><span class=\"line\">    assert(msgid != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    MsgData data;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;data, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(data));</span><br><span class=\"line\">    data.mtype = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(data.mtext, <span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    msgsnd(msgid, &amp;data, <span class=\"number\">128</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// b.c</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msgdata</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">long</span> mtype;</span><br><span class=\"line\">    <span class=\"type\">char</span> mtext[<span class=\"number\">128</span>];</span><br><span class=\"line\">&#125;MsgData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> msgid = msgget((<span class=\"type\">key_t</span>)<span class=\"number\">1234</span>, IPC_CREAT|<span class=\"number\">0664</span>);</span><br><span class=\"line\">    assert(msgid != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    MsgData data;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;data, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(data));</span><br><span class=\"line\">    </span><br><span class=\"line\">    msgrcv(msgid, &amp;data, <span class=\"number\">128</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;id:%d, text:%s&quot;</span>, (<span class=\"type\">int</span>)data.mtype, data.mtext);</span><br><span class=\"line\">    msgctl(msgid, IPC_RMID, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-线程\"><a href=\"#12-线程\" class=\"headerlink\" title=\"12.线程\"></a>12.线程</h2><ul>\n<li>在操作系统中线程的实现有三种方式<ul>\n<li>内核级线程</li>\n<li>用户级线程</li>\n<li>组合级线程</li>\n</ul>\n</li>\n<li>进程与线程的区别<ul>\n<li>进程是资源分配的最小单位，线程是 CPU 调度的最小单位</li>\n<li>进程有自己的独立地址空间，线程共享进程中的地址空间</li>\n<li>进程的创建消耗资源大，线程的创建相对较小</li>\n<li>进程的切换开销大，线程的切换开销相对较小</li>\n</ul>\n</li>\n<li>线程接口<ul>\n<li>pthread不是 Linux 系统默认的库，编译中要加 -lpthread参数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_create</span><span class=\"params\">(<span class=\"type\">pthread_t</span> *thread, <span class=\"type\">const</span> <span class=\"type\">pthread_attr_t</span> *attr,<span class=\"type\">void</span> *(*start_routine) (<span class=\"type\">void</span> *), <span class=\"type\">void</span> *arg)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_exit</span><span class=\"params\">(<span class=\"type\">void</span> *retval)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_join</span><span class=\"params\">(<span class=\"type\">pthread_t</span> thread, <span class=\"type\">void</span> **retval)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例程</span></span><br><span class=\"line\"><span class=\"type\">void</span> * <span class=\"title function_\">fun</span><span class=\"params\">(<span class=\"type\">void</span> * argv)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *threadNum = (<span class=\"type\">int</span>*)argv;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;this thread is %d\\n&quot;</span>, *threadNum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pthread_exit(threadNum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">pthread_t</span> t;</span><br><span class=\"line\">    <span class=\"type\">int</span> *ret = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    assert( pthread_create(&amp;t, <span class=\"literal\">NULL</span>, fun, &amp;a) != <span class=\"number\">-1</span> );</span><br><span class=\"line\">    assert( pthread_join(t, (<span class=\"type\">void</span> **)&amp;ret) != <span class=\"number\">-1</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;return: %d\\n&quot;</span>, *ret);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-线程同步\"><a href=\"#13-线程同步\" class=\"headerlink\" title=\"13.线程同步\"></a>13.线程同步</h2><ul>\n<li>互斥锁</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_mutex_init</span><span class=\"params\">(<span class=\"type\">pthread_mutex_t</span> *mutex, <span class=\"type\">pthread_mutexattr_t</span> *attr)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_mutex_lock</span><span class=\"params\">(<span class=\"type\">pthread_mutex_t</span> *mutex)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_mutex_unlock</span><span class=\"params\">(<span class=\"type\">pthread_mutex_t</span> *mutex)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_mutex_destroy</span><span class=\"params\">(<span class=\"type\">pthread_mutex_t</span> *mutex)</span>;</span><br><span class=\"line\"><span class=\"comment\">//例程</span></span><br><span class=\"line\"><span class=\"type\">pthread_mutex_t</span> mutex;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">random_sleep</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n =  rand()%<span class=\"number\">3</span>;</span><br><span class=\"line\">    sleep(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> * <span class=\"title function_\">fun</span><span class=\"params\">(<span class=\"type\">void</span> * argv)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">        fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        random_sleep();</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;A\\n&quot;</span>);</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">        random_sleep();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">pthread_t</span> t;</span><br><span class=\"line\">    <span class=\"type\">int</span> *ret = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    pthread_mutex_init(&amp;mutex, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    assert( pthread_create(&amp;t, <span class=\"literal\">NULL</span>, fun, &amp;a) != <span class=\"number\">-1</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">        fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        random_sleep();</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;B\\n&quot;</span>);</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">        random_sleep();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pthread_mutex_destroy(&amp;mutex);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>信号量</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sem_init</span><span class=\"params\">(<span class=\"type\">sem_t</span> *sem, <span class=\"type\">int</span> pshared, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> value)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sem_wait</span><span class=\"params\">(<span class=\"type\">sem_t</span> *sem)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sem_post</span><span class=\"params\">(<span class=\"type\">sem_t</span> *sem)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sem_destroy</span><span class=\"params\">(<span class=\"type\">sem_t</span> *sem)</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>条件变量<ul>\n<li>条件变量提供了一种线程间的通知机制：当某个共享数据达到某个值的时候，唤醒等待这个共享数据的线程</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_cond_init</span><span class=\"params\">(<span class=\"type\">pthread_cond_t</span> *cond, <span class=\"type\">pthread_condattr_t</span> *attr)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_cond_wait</span><span class=\"params\">(<span class=\"type\">pthread_cond_t</span> *cond, <span class=\"type\">pthread_mutex_t</span> *mutex)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_cond_signal</span><span class=\"params\">(<span class=\"type\">pthread_cond_t</span> *cond)</span>; <span class=\"comment\">//唤醒单个线程</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_cond_broadcast</span><span class=\"params\">(<span class=\"type\">pthread_cond_t</span> *cond)</span>; <span class=\"comment\">//唤醒所有等待的线程</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_cond_destroy</span><span class=\"params\">(<span class=\"type\">pthread_cond_t</span> *cond)</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>读写锁</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_rwlock_init</span><span class=\"params\">(<span class=\"type\">pthread_rwlock_t</span> *rwlock, <span class=\"type\">pthread_rwlockattr_t</span> *attr)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_rwlock_rdlock</span><span class=\"params\">(<span class=\"type\">pthread_rwlock_t</span> *rwlock)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_rwlock_wrlock</span><span class=\"params\">(<span class=\"type\">pthread_rwlock_t</span> *rwlock)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_rwlock_unlock</span><span class=\"params\">(<span class=\"type\">pthread_rwlock_t</span> *rwlock)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_rwlock_destroy</span><span class=\"params\">(<span class=\"type\">pthread_rwlock_t</span> *rwlock)</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-线程安全\"><a href=\"#14-线程安全\" class=\"headerlink\" title=\"14.线程安全\"></a>14.线程安全</h2><ul>\n<li>对线程同步，保证同一时刻只有一个线程访问临界资源。</li>\n<li>在多线程中使用线程安全的函数（可重入函数），所谓线程安全的函数指的是：如果一个<br>函数能被多个线程同时调用且不发生竟态条件，则我们称它是线程安全的。</li>\n<li>char *strtok(char *str, const char *delim)&#x2F;&#x2F;分割字符串<ul>\n<li>strtok就是线程不安全的，该函数内部存放一个指针静态变量，如果多线程同时使用该指针就会导致线程不安全</li>\n<li>采用strok_r函数是线程安全的</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"15-线程fork\"><a href=\"#15-线程fork\" class=\"headerlink\" title=\"15.线程fork\"></a>15.线程fork</h2><ul>\n<li>多线程种如果子线程fork，只会复制该子线程，其他子线程不会复制</li>\n</ul>\n","excerpt":"<p>Linux应用开发</p>","more":"<h1 id=\"Linux平台c语言应用开发\"><a href=\"#Linux平台c语言应用开发\" class=\"headerlink\" title=\"Linux平台c语言应用开发\"></a>Linux平台c语言应用开发</h1><h2 id=\"1-linux文件底层系统调用\"><a href=\"#1-linux文件底层系统调用\" class=\"headerlink\" title=\"1. linux文件底层系统调用\"></a>1. linux文件底层系统调用</h2><ul>\n<li>open 获取一个文件描述符</li>\n<li>write</li>\n<li>read</li>\n<li>close</li>\n<li>操作不区分文本，二进制</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[], <span class=\"type\">char</span> *envp[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    int fd = open(&quot;file.txt&quot;, O_WRONLY | O_CREAT, 0600);</span></span><br><span class=\"line\"><span class=\"comment\">    assert( fd != -1);</span></span><br><span class=\"line\"><span class=\"comment\">    printf(&quot;fd=%d\\n&quot;, fd);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    write(fd,&quot;hello&quot;, 5);</span></span><br><span class=\"line\"><span class=\"comment\">    close(fd);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    int fd = open(&quot;file.txt&quot;, O_RDONLY);</span></span><br><span class=\"line\"><span class=\"comment\">    assert( fd != -1);</span></span><br><span class=\"line\"><span class=\"comment\">    char buff[128] = &#123;0&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">    int n = read(fd, buff, 127);</span></span><br><span class=\"line\"><span class=\"comment\">    printf(&quot;n = %d,buff = %s\\n&quot;, n, buff);</span></span><br><span class=\"line\"><span class=\"comment\">    close(fd);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> fdr = open(<span class=\"string\">&quot;1.png&quot;</span>, O_RDONLY);</span><br><span class=\"line\">    <span class=\"type\">int</span> fdw = open(<span class=\"string\">&quot;2.png&quot;</span>, O_WRONLY | O_CREAT, <span class=\"number\">0600</span>);</span><br><span class=\"line\">    assert( fdr != <span class=\"number\">-1</span> &amp;&amp; fdw != <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"type\">char</span> buff[<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( (num = read(fdr, buff, <span class=\"number\">256</span>)) &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        write(fdw, buff, num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    close(fdw);</span><br><span class=\"line\">    close(fdr);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-父子进程共享打开文件\"><a href=\"#2-父子进程共享打开文件\" class=\"headerlink\" title=\"2. 父子进程共享打开文件\"></a>2. 父子进程共享打开文件</h2><ul>\n<li>父子进程共享文件偏移量</li>\n<li>子进程可以访问父进程的文件</li>\n<li>多个进程指向同一个struct file，需要在每个文件close</li>\n<li>若先fork后打开文件，不会指向同一个struct file，每个进程有自己独立的struct file</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[], <span class=\"type\">char</span> *envp[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;file.txt&quot;</span>, O_RDONLY);</span><br><span class=\"line\">    assert(fd != <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"type\">pid_t</span> pid = fork();</span><br><span class=\"line\">    assert(pid != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( pid == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> buff[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = read(fd, buff, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child %s\\n&quot;</span>, buff);</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        n = read(fd, buff, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child %s\\n&quot;</span>, buff);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> buff[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = read(fd, buff, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;parent %s\\n&quot;</span>, buff);</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        n = read(fd, buff, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;parent %s\\n&quot;</span>, buff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-系统调用和库函数区别\"><a href=\"#3-系统调用和库函数区别\" class=\"headerlink\" title=\"3. 系统调用和库函数区别\"></a>3. 系统调用和库函数区别</h2><ul>\n<li>系统调用在内核中，属于内核空间；库函数的实现在库函数中，属于用户空间</li>\n<li>某些库函数底层其实仍然是系统调用</li>\n</ul>\n<h2 id=\"4-内存申请与释放\"><a href=\"#4-内存申请与释放\" class=\"headerlink\" title=\"4. 内存申请与释放\"></a>4. 内存申请与释放</h2><ul>\n<li>malloc()申请1G内存能否成功？<ul>\n<li>malloc(单位是b) </li>\n<li>malloc申请的内存是虚拟内存，在实际使用的时候才会划分物理空间</li>\n<li>分配1G能分配成功，申请内存数量应该小于剩余内存（memory+swap）</li>\n</ul>\n</li>\n<li>申请的内存如果没有释放会怎么样？<ul>\n<li>在程序退出时，内存依旧会被回收</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-exec进程替换\"><a href=\"#5-exec进程替换\" class=\"headerlink\" title=\"5. exec进程替换\"></a>5. exec进程替换</h2><ul>\n<li>linux系统交互都是一个fork和一个exec</li>\n<li>execl(const char *path, const char <em>arg, … &#x2F;</em> (char  *) NULL *&#x2F;);</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[], <span class=\"type\">char</span> *envp[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;main pid = %d ppid = %d\\n&quot;</span>, getpid(), getppid());</span><br><span class=\"line\">    <span class=\"type\">pid_t</span> pid = fork();</span><br><span class=\"line\">    assert(pid != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pid == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child pid=%d ppid=%d\\n&quot;</span>, getpid(), getppid());</span><br><span class=\"line\">        execl(<span class=\"string\">&quot;/bin/ps&quot;</span>, <span class=\"string\">&quot;ps&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, (<span class=\"type\">char</span> *)<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    wait(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-信号\"><a href=\"#6-信号\" class=\"headerlink\" title=\"6. 信号\"></a>6. 信号</h2><ul>\n<li>信号是系统响应某个条件而产生的事件，进程接收到信号会执行相应的操作</li>\n<li>通过signal()设置相应的响应方式，可以设置以下几种响应方式<ul>\n<li>默认SIG_DEF</li>\n<li>忽略SIG_IGN</li>\n<li>自定义 void fun_sig(int sig)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7-实现自己的KILL命令\"><a href=\"#7-实现自己的KILL命令\" class=\"headerlink\" title=\"7. 实现自己的KILL命令\"></a>7. 实现自己的KILL命令</h2><ul>\n<li>kill 默认信号量是15</li>\n<li>9号信号是不允许忽略的终止信号</li>\n<li>sscanf解析转化字符串</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sscanf</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str, <span class=\"type\">const</span> <span class=\"type\">char</span> *format, ...)</span>;</span><br><span class=\"line\"><span class=\"comment\">//例程</span></span><br><span class=\"line\"><span class=\"type\">int</span> year, month, day;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> converted = <span class=\"built_in\">sscanf</span>(<span class=\"string\">&quot;20191103&quot;</span>, <span class=\"string\">&quot;%04d%02d%02d&quot;</span>, &amp;year, &amp;month, &amp;day);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;converted=%d, year=%d, month=%d, day=%d/n&quot;</span>, converted, year, month, day);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc != <span class=\"number\">3</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;argc error\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> pid = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sscanf</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;%d&quot;</span>, &amp;pid);</span><br><span class=\"line\">    <span class=\"built_in\">sscanf</span>(argv[<span class=\"number\">2</span>], <span class=\"string\">&quot;%d&quot;</span>, &amp;s);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;pid:%d signal:%d\\n&quot;</span>, pid, s);</span><br><span class=\"line\">    kill(pid, s);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-有名管道和无名管道\"><a href=\"#8-有名管道和无名管道\" class=\"headerlink\" title=\"8. 有名管道和无名管道\"></a>8. 有名管道和无名管道</h2><ul>\n<li>进程间通信方式：<ul>\n<li>管道，半双工<ul>\n<li>有名管道</li>\n<li>无名管道</li>\n</ul>\n</li>\n<li>信号量</li>\n<li>共享内存</li>\n<li>消息队列</li>\n<li>套接字</li>\n</ul>\n</li>\n<li>有&#x2F;无名管道区别：<ul>\n<li>有名管道在任意两个进程间通信</li>\n<li>无名管道在父子进程间通信</li>\n</ul>\n</li>\n<li>有名管道创建使用</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chengs@ubuntu:~/test$ <span class=\"built_in\">mkfifo</span> fifo</span><br><span class=\"line\">chengs@ubuntu:~/test$ <span class=\"built_in\">ls</span> -l</span><br><span class=\"line\">prw-rw-r-- 1 chengs chengs     0 Jun 18 04:00 fifo</span><br></pre></td></tr></table></figure>\n<ul>\n<li>管道只有O_RDONLY、O_WRONLY两种模式</li>\n<li>管道文件只能两个进程同时打开，单个进程打开管道会阻塞</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//write</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;fifo&quot;</span>, O_WRONLY);</span><br><span class=\"line\">    assert(fd != <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fd=%d\\n&quot;</span>, fd);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;input:\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">char</span> buff[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        fgets(buff,<span class=\"number\">128</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"built_in\">strncmp</span>(buff, <span class=\"string\">&quot;end&quot;</span>, <span class=\"number\">3</span> ) == <span class=\"number\">0</span> )</span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        write(fd, buff, <span class=\"built_in\">strlen</span>(buff));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//read</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;fifo&quot;</span>, O_RDONLY);</span><br><span class=\"line\">    assert(fd != <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fd=%d\\n&quot;</span>, fd);</span><br><span class=\"line\">    <span class=\"type\">char</span> buff[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (read(fd, buff, <span class=\"number\">127</span>) == <span class=\"number\">0</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;read: %s&quot;</span>, buff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>无名管道创建使用</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fd[<span class=\"number\">2</span>];</span><br><span class=\"line\">    assert( pipe(fd) != <span class=\"number\">-1</span>); <span class=\"comment\">//fd[0] r, fd[1] w</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">pid_t</span> pid = fork();</span><br><span class=\"line\">    assert( pid != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pid == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        close(fd[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"type\">char</span> buff[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        read(fd[<span class=\"number\">0</span>], buff, <span class=\"number\">127</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;child read:%s\\n&quot;</span>, buff);</span><br><span class=\"line\">        close(fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        close(fd[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;parent write:hello\\n&quot;</span>);</span><br><span class=\"line\">        write(fd[<span class=\"number\">1</span>], <span class=\"string\">&quot;hello&quot;</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">        close(fd[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-信号量\"><a href=\"#9-信号量\" class=\"headerlink\" title=\"9.信号量\"></a>9.信号量</h2><p>信号量值代表允许访问的资源数目</p>\n<ul>\n<li>P 操作</li>\n<li>V 操作</li>\n<li>临界资源：同一时刻，只允许被一个进程或线程访问的资源</li>\n<li>临界区：访问临界资源的代码段</li>\n<li>ipcs&#x2F;ipcrm命令查看和删除消息进程通信方式（消息队列、共享内存、信号量）</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">semget</span><span class=\"params\">(<span class=\"type\">key_t</span> key, <span class=\"type\">int</span> nsems, <span class=\"type\">int</span> semflg)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">semop</span><span class=\"params\">(<span class=\"type\">int</span> semid, <span class=\"keyword\">struct</span> sembuf *sops, <span class=\"type\">unsigned</span> nsops)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">semctl</span><span class=\"params\">(<span class=\"type\">int</span> semid, <span class=\"type\">int</span> semnum, <span class=\"type\">int</span> cmd, ...)</span>;</span><br><span class=\"line\"><span class=\"comment\">// sem.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">semun</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_init</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_p</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_v</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_destroy</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">// sem.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sem.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> semid = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_init</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    semid = semget((<span class=\"type\">key_t</span>)<span class=\"number\">1234</span>, <span class=\"number\">1</span>, IPC_CREAT|IPC_EXCL|<span class=\"number\">0600</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(semid == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        semid = semget((<span class=\"type\">key_t</span>)<span class=\"number\">1234</span>, <span class=\"number\">1</span>, <span class=\"number\">0600</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">union</span> semun a;</span><br><span class=\"line\">        a.val = <span class=\"number\">1</span>;<span class=\"comment\">//信号量初始值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( semctl(semid, <span class=\"number\">0</span>, SETVAL, a) == <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">            perror(<span class=\"string\">&quot;semctrl error&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_p</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sembuf</span> <span class=\"title\">buf</span>;</span></span><br><span class=\"line\">    buf.sem_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    buf.sem_op = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    buf.sem_flg = SEM_UNDO;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( semop(semid, &amp;buf, <span class=\"number\">1</span>) == <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;semop p error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_v</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sembuf</span> <span class=\"title\">buf</span>;</span></span><br><span class=\"line\">    buf.sem_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    buf.sem_op = <span class=\"number\">1</span>;</span><br><span class=\"line\">    buf.sem_flg = SEM_UNDO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>( semop(semid, &amp;buf, <span class=\"number\">1</span>) == <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;semop v error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_destroy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( semctl(semid, <span class=\"number\">0</span>, IPC_RMID) == <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;semctrl del error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//a .c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sem.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    sem_init();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sem_p();</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> n = rand()%<span class=\"number\">3</span>;</span><br><span class=\"line\">        sleep(n);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        sem_v();</span><br><span class=\"line\">        n = rand()%<span class=\"number\">3</span>;</span><br><span class=\"line\">        sleep(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// b.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sem.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    sem_init();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sem_p();</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> n = rand()%<span class=\"number\">3</span>;</span><br><span class=\"line\">        sleep(n);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        sem_v();</span><br><span class=\"line\">        n = rand()%<span class=\"number\">3</span>;</span><br><span class=\"line\">        sleep(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-共享内存\"><a href=\"#10-共享内存\" class=\"headerlink\" title=\"10.共享内存\"></a>10.共享内存</h2><ul>\n<li>共享内存是先在物理内存上申请一块空间，多个进程可以将其映射到自己的虚拟地址空间中</li>\n<li>并未提供同步机制，所以我们通常需要用其他的机制来同步对共享内存的访问。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">shmget</span><span class=\"params\">(<span class=\"type\">key_t</span> key, <span class=\"type\">size_t</span> size, <span class=\"type\">int</span> shmflg)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span>* <span class=\"title function_\">shmat</span><span class=\"params\">(<span class=\"type\">int</span> shmid, <span class=\"type\">const</span> <span class=\"type\">void</span> *shmaddr, <span class=\"type\">int</span> shmflg)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">shmdt</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span> *shmaddr)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">shmctl</span><span class=\"params\">(<span class=\"type\">int</span> shmid, <span class=\"type\">int</span> cmd, <span class=\"keyword\">struct</span> shmid_ds *buf)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sem.h </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> _SEM_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _SEM_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/sem.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">semun</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sem_init</span><span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> semVal[], <span class=\"type\">int</span> nsems)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_p</span><span class=\"params\">(<span class=\"type\">int</span> semid, <span class=\"type\">int</span> index)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_v</span><span class=\"params\">(<span class=\"type\">int</span> semid, <span class=\"type\">int</span> index)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_destroy</span><span class=\"params\">(<span class=\"type\">int</span> semid)</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"comment\">// sem.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sem.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sem_init</span><span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> semVal[], <span class=\"type\">int</span> nsems)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> semid = semget((<span class=\"type\">key_t</span>)key, nsems, IPC_CREAT|IPC_EXCL|<span class=\"number\">0664</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(semid == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        semid = semget((<span class=\"type\">key_t</span>)key, nsems, <span class=\"number\">0664</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">union</span> semun a;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; nsems; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a.val = semVal[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( semctl(semid, i, SETVAL, a) == <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">                perror(<span class=\"string\">&quot;semctrl error&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> semid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_p</span><span class=\"params\">(<span class=\"type\">int</span> semid, <span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sembuf</span> <span class=\"title\">buf</span>;</span></span><br><span class=\"line\">    buf.sem_num = index;</span><br><span class=\"line\">    buf.sem_op = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    buf.sem_flg = SEM_UNDO;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( semop(semid, &amp;buf, <span class=\"number\">1</span>) == <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;semop p error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_v</span><span class=\"params\">(<span class=\"type\">int</span> semid, <span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sembuf</span> <span class=\"title\">buf</span>;</span></span><br><span class=\"line\">    buf.sem_num = index;</span><br><span class=\"line\">    buf.sem_op = <span class=\"number\">1</span>;</span><br><span class=\"line\">    buf.sem_flg = SEM_UNDO;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>( semop(semid, &amp;buf, <span class=\"number\">1</span>) == <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;semop v error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sem_destroy</span><span class=\"params\">(<span class=\"type\">int</span> semid)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( semctl(semid, <span class=\"number\">0</span>, IPC_RMID) == <span class=\"number\">-1</span> )&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;semctrl del error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sem.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ipc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/shm.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> shmid = shmget((<span class=\"type\">key_t</span>)<span class=\"number\">1234</span>, <span class=\"number\">128</span>, IPC_CREAT|<span class=\"number\">0664</span>);</span><br><span class=\"line\">    assert(shmid != <span class=\"number\">-1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> sem[<span class=\"number\">2</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> semid = sem_init(<span class=\"number\">1234</span>, sem, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *p = (<span class=\"type\">char</span> *)shmat(shmid, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    assert(p != (<span class=\"type\">char</span>*)<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> buff[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;please input:&quot;</span>);</span><br><span class=\"line\">        fgets(buff, <span class=\"number\">128</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">        sem_p(semid, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(p, buff);</span><br><span class=\"line\">        sem_v(semid, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">strncmp</span>(buff, <span class=\"string\">&quot;end&quot;</span>, <span class=\"number\">3</span>) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    shmdt(p);</span><br><span class=\"line\">    shmctl(shmid, IPC_RMID, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sem.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ipc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/shm.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> shmid = shmget((<span class=\"type\">key_t</span>)<span class=\"number\">1234</span>, <span class=\"number\">128</span>, IPC_CREAT|<span class=\"number\">0664</span>);</span><br><span class=\"line\">    assert(shmid != <span class=\"number\">-1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> sem[<span class=\"number\">2</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> semid = sem_init(<span class=\"number\">1234</span>, sem, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *p = (<span class=\"type\">char</span> *)shmat(shmid, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    assert(p != (<span class=\"type\">char</span>*)<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> buff[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        sem_p(semid, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(buff, p);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">strncmp</span>(buff, <span class=\"string\">&quot;end&quot;</span>, <span class=\"number\">3</span>) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sent:%s&quot;</span>, buff);</span><br><span class=\"line\">        fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        sem_v(semid, <span class=\"number\">0</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    shmdt(p);</span><br><span class=\"line\">    shmctl(shmid, IPC_RMID, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    sem_destroy(semid);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-消息队列\"><a href=\"#11-消息队列\" class=\"headerlink\" title=\"11.消息队列\"></a>11.消息队列</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">msgget</span><span class=\"params\">(<span class=\"type\">key_t</span> key, <span class=\"type\">int</span> msqflg)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">msgsnd</span><span class=\"params\">(<span class=\"type\">int</span> msqid, <span class=\"type\">const</span> <span class=\"type\">void</span> *msqp, <span class=\"type\">size_t</span> msqsz, <span class=\"type\">int</span> msqflg)</span>;</span><br><span class=\"line\"><span class=\"type\">ssize_t</span> <span class=\"title function_\">msgrcv</span><span class=\"params\">(<span class=\"type\">int</span> msqid, <span class=\"type\">void</span> *msgp, <span class=\"type\">size_t</span> msqsz, <span class=\"type\">long</span> msqtyp, <span class=\"type\">int</span> msqflg)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">msgctl</span><span class=\"params\">(<span class=\"type\">int</span> msqid, <span class=\"type\">int</span> cmd, <span class=\"keyword\">struct</span> msqid_ds *buf)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a.c</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msgdata</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">long</span> mtype;</span><br><span class=\"line\">    <span class=\"type\">char</span> mtext[<span class=\"number\">128</span>];</span><br><span class=\"line\">&#125;MsgData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> msgid = msgget((<span class=\"type\">key_t</span>)<span class=\"number\">1234</span>, IPC_CREAT|<span class=\"number\">0664</span>);</span><br><span class=\"line\">    assert(msgid != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    MsgData data;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;data, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(data));</span><br><span class=\"line\">    data.mtype = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(data.mtext, <span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    msgsnd(msgid, &amp;data, <span class=\"number\">128</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// b.c</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msgdata</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">long</span> mtype;</span><br><span class=\"line\">    <span class=\"type\">char</span> mtext[<span class=\"number\">128</span>];</span><br><span class=\"line\">&#125;MsgData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> msgid = msgget((<span class=\"type\">key_t</span>)<span class=\"number\">1234</span>, IPC_CREAT|<span class=\"number\">0664</span>);</span><br><span class=\"line\">    assert(msgid != <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    MsgData data;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;data, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(data));</span><br><span class=\"line\">    </span><br><span class=\"line\">    msgrcv(msgid, &amp;data, <span class=\"number\">128</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;id:%d, text:%s&quot;</span>, (<span class=\"type\">int</span>)data.mtype, data.mtext);</span><br><span class=\"line\">    msgctl(msgid, IPC_RMID, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-线程\"><a href=\"#12-线程\" class=\"headerlink\" title=\"12.线程\"></a>12.线程</h2><ul>\n<li>在操作系统中线程的实现有三种方式<ul>\n<li>内核级线程</li>\n<li>用户级线程</li>\n<li>组合级线程</li>\n</ul>\n</li>\n<li>进程与线程的区别<ul>\n<li>进程是资源分配的最小单位，线程是 CPU 调度的最小单位</li>\n<li>进程有自己的独立地址空间，线程共享进程中的地址空间</li>\n<li>进程的创建消耗资源大，线程的创建相对较小</li>\n<li>进程的切换开销大，线程的切换开销相对较小</li>\n</ul>\n</li>\n<li>线程接口<ul>\n<li>pthread不是 Linux 系统默认的库，编译中要加 -lpthread参数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_create</span><span class=\"params\">(<span class=\"type\">pthread_t</span> *thread, <span class=\"type\">const</span> <span class=\"type\">pthread_attr_t</span> *attr,<span class=\"type\">void</span> *(*start_routine) (<span class=\"type\">void</span> *), <span class=\"type\">void</span> *arg)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_exit</span><span class=\"params\">(<span class=\"type\">void</span> *retval)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_join</span><span class=\"params\">(<span class=\"type\">pthread_t</span> thread, <span class=\"type\">void</span> **retval)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例程</span></span><br><span class=\"line\"><span class=\"type\">void</span> * <span class=\"title function_\">fun</span><span class=\"params\">(<span class=\"type\">void</span> * argv)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *threadNum = (<span class=\"type\">int</span>*)argv;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;this thread is %d\\n&quot;</span>, *threadNum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pthread_exit(threadNum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">pthread_t</span> t;</span><br><span class=\"line\">    <span class=\"type\">int</span> *ret = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    assert( pthread_create(&amp;t, <span class=\"literal\">NULL</span>, fun, &amp;a) != <span class=\"number\">-1</span> );</span><br><span class=\"line\">    assert( pthread_join(t, (<span class=\"type\">void</span> **)&amp;ret) != <span class=\"number\">-1</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;return: %d\\n&quot;</span>, *ret);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-线程同步\"><a href=\"#13-线程同步\" class=\"headerlink\" title=\"13.线程同步\"></a>13.线程同步</h2><ul>\n<li>互斥锁</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_mutex_init</span><span class=\"params\">(<span class=\"type\">pthread_mutex_t</span> *mutex, <span class=\"type\">pthread_mutexattr_t</span> *attr)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_mutex_lock</span><span class=\"params\">(<span class=\"type\">pthread_mutex_t</span> *mutex)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_mutex_unlock</span><span class=\"params\">(<span class=\"type\">pthread_mutex_t</span> *mutex)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_mutex_destroy</span><span class=\"params\">(<span class=\"type\">pthread_mutex_t</span> *mutex)</span>;</span><br><span class=\"line\"><span class=\"comment\">//例程</span></span><br><span class=\"line\"><span class=\"type\">pthread_mutex_t</span> mutex;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">random_sleep</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n =  rand()%<span class=\"number\">3</span>;</span><br><span class=\"line\">    sleep(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> * <span class=\"title function_\">fun</span><span class=\"params\">(<span class=\"type\">void</span> * argv)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">        fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        random_sleep();</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;A\\n&quot;</span>);</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">        random_sleep();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">pthread_t</span> t;</span><br><span class=\"line\">    <span class=\"type\">int</span> *ret = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    pthread_mutex_init(&amp;mutex, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    assert( pthread_create(&amp;t, <span class=\"literal\">NULL</span>, fun, &amp;a) != <span class=\"number\">-1</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">        fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        random_sleep();</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;B\\n&quot;</span>);</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">        random_sleep();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pthread_mutex_destroy(&amp;mutex);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>信号量</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sem_init</span><span class=\"params\">(<span class=\"type\">sem_t</span> *sem, <span class=\"type\">int</span> pshared, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> value)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sem_wait</span><span class=\"params\">(<span class=\"type\">sem_t</span> *sem)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sem_post</span><span class=\"params\">(<span class=\"type\">sem_t</span> *sem)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sem_destroy</span><span class=\"params\">(<span class=\"type\">sem_t</span> *sem)</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>条件变量<ul>\n<li>条件变量提供了一种线程间的通知机制：当某个共享数据达到某个值的时候，唤醒等待这个共享数据的线程</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_cond_init</span><span class=\"params\">(<span class=\"type\">pthread_cond_t</span> *cond, <span class=\"type\">pthread_condattr_t</span> *attr)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_cond_wait</span><span class=\"params\">(<span class=\"type\">pthread_cond_t</span> *cond, <span class=\"type\">pthread_mutex_t</span> *mutex)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_cond_signal</span><span class=\"params\">(<span class=\"type\">pthread_cond_t</span> *cond)</span>; <span class=\"comment\">//唤醒单个线程</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_cond_broadcast</span><span class=\"params\">(<span class=\"type\">pthread_cond_t</span> *cond)</span>; <span class=\"comment\">//唤醒所有等待的线程</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_cond_destroy</span><span class=\"params\">(<span class=\"type\">pthread_cond_t</span> *cond)</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>读写锁</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_rwlock_init</span><span class=\"params\">(<span class=\"type\">pthread_rwlock_t</span> *rwlock, <span class=\"type\">pthread_rwlockattr_t</span> *attr)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_rwlock_rdlock</span><span class=\"params\">(<span class=\"type\">pthread_rwlock_t</span> *rwlock)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_rwlock_wrlock</span><span class=\"params\">(<span class=\"type\">pthread_rwlock_t</span> *rwlock)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_rwlock_unlock</span><span class=\"params\">(<span class=\"type\">pthread_rwlock_t</span> *rwlock)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pthread_rwlock_destroy</span><span class=\"params\">(<span class=\"type\">pthread_rwlock_t</span> *rwlock)</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-线程安全\"><a href=\"#14-线程安全\" class=\"headerlink\" title=\"14.线程安全\"></a>14.线程安全</h2><ul>\n<li>对线程同步，保证同一时刻只有一个线程访问临界资源。</li>\n<li>在多线程中使用线程安全的函数（可重入函数），所谓线程安全的函数指的是：如果一个<br>函数能被多个线程同时调用且不发生竟态条件，则我们称它是线程安全的。</li>\n<li>char *strtok(char *str, const char *delim)&#x2F;&#x2F;分割字符串<ul>\n<li>strtok就是线程不安全的，该函数内部存放一个指针静态变量，如果多线程同时使用该指针就会导致线程不安全</li>\n<li>采用strok_r函数是线程安全的</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"15-线程fork\"><a href=\"#15-线程fork\" class=\"headerlink\" title=\"15.线程fork\"></a>15.线程fork</h2><ul>\n<li>多线程种如果子线程fork，只会复制该子线程，其他子线程不会复制</li>\n</ul>","path":"2022/06/19/LINUX应用开发(2)/","permalink":"http://chengs.run/2022/06/19/LINUX%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91(2)/","tags":[{"name":"linux","_id":"cm833960c0002i0q66dwgd8wg","slug":"linux","path":"tags/linux/","permalink":"http://chengs.run/tags/linux/","length":13},{"name":"linux应用开发","_id":"cm833960i000bi0q6eki8aqst","slug":"linux应用开发","path":"tags/linux应用开发/","permalink":"http://chengs.run/tags/linux%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/","length":4}],"categories":[],"prev":{"title":"linux应用开发(3)","date":"2022-06-19T14:32:09.995Z","slug":"linux应用开发(3)","published":true,"updated":"2022-06-19T14:32:27.126Z","_id":"cm833960u0014i0q68psr57r7","layout":"post","photos":[],"excerpt":"<p>Linux应用开发</p>","path":"2022/06/19/linux应用开发(3)/","permalink":"http://chengs.run/2022/06/19/linux%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91(3)/","__post":true},"next":{"title":"linux应用开发(1)","date":"2022-06-18T03:27:28.596Z","slug":"Linux应用开发(1)","published":true,"updated":"2022-06-18T06:33:27.311Z","_id":"cm833960f0005i0q6gefvaaci","layout":"post","photos":[],"excerpt":"<p>Linux应用开发基础</p>","path":"2022/06/18/Linux应用开发(1)/","permalink":"http://chengs.run/2022/06/18/Linux%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91(1)/","__post":true},"__post":true}