{"title":"内存池","date":"2025-03-09T07:14:00.000Z","source":"_posts/内存池.md","raw":"---\ntitle: 内存池\ndate: 2025-03-09 15:14:00\ncategories: \ntags: \n- c/c++\n---\n\n内存池\n\n<!-- more -->\n\n# 头文件\n```h\n#ifndef __MEMPOOL_H__\n#define __MEMPOOL_H__\n#include <stdio.h>\n\nclass MemPool\n{\n    class Impl;\n    Impl *m_impl;\n    MemPool();\n    ~MemPool();\n\npublic:\n    static MemPool &instance();\n\n    void reset_buff(void *ptr, size_t size);\n\n    void *alloc(size_t size);\n\n    void dealloc(void *ptr);\n};\n\n#define malloc(a) MemPool::instance().alloc(a)\n#define free(a) MemPool::instance().dealloc(a)\n\n#endif\n```\n\n# 基于单向链表的内存池\n优点是不需要分配管理的内存，性能高，节省内存，缺点是业务的代码如果内存越界，可能会影响内存池的运行；如果业务释放的内存地址是申请内存对齐后的内存，无法正常释放\n\n```cpp\n#include <assert.h>\n#include <stdint.h>\n#include <mutex>\n#include \"mempool.h\"\n\n#define MAGIC_NUMBER (0xafafafafu)\nstruct Block\n{\n    Block* m_next;\n    uint32_t m_size;\n    uint32_t m_magic = MAGIC_NUMBER;\n\n    Block(uint32_t size): m_size(size){};\n    Block(uint32_t size, Block* next): m_size(size), m_next(next){};\n\n    inline Block* splitBlock(uint32_t size, Block* next)\n    {\n        if (m_size <= size + sizeof(Block)) return nullptr;\n        Block* newBlock = new (reinterpret_cast<uint8_t*>(getDataStartPtr()) + size) Block(m_size - size - sizeof(Block), next);\n        m_size = size;\n        return newBlock;\n    }\n\n    inline bool verify()\n    {\n        return m_magic == MAGIC_NUMBER;\n    }\n\n    inline void* getDataStartPtr()\n    {\n        return this + 1;\n    }\n\n    inline void* getDataEndPtr()\n    {\n        return (uint8_t*)getDataStartPtr() + m_size;\n    }\n\n    static inline Block* ptr2Block(void* ptr)\n    {\n        return (Block*)ptr - 1;\n    }\n};\n\nclass MemPool::Impl\n{\n    Block* m_freeList;\n    size_t m_size;\n    void* m_poolData;\n    std::mutex m_mtx;\n        \n    void mergeBlock(Block* current, Block* previous, Block* next)\n    {\n        if (previous && (size_t)previous->getDataEndPtr() == (size_t)current)\n        {\n            previous->m_size += current->m_size + sizeof(Block);\n            previous->m_next = next;\n            current = previous;\n        }\n\n        if (next && (size_t)current->getDataEndPtr() == (size_t)next)\n        {\n            current->m_size += next->m_size + sizeof(Block);\n            current->m_next = next->m_next;\n        }\n    }\n\npublic:\n    Impl()\n    {\n        m_freeList = nullptr;\n        m_poolData = nullptr;\n        m_size = 0;\n    };\n\n    void reset_buff(void *ptr, size_t size)\n    {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_poolData = ptr;\n        m_size = size;\n        m_freeList = new(m_poolData) Block(size - sizeof(Block), nullptr);\n    }\n    \n    void *alloc(size_t size)\n    {\n        if (size == 0) return nullptr;\n\n        std::lock_guard<std::mutex> lock(m_mtx);\n\n        Block* current = m_freeList;\n        Block* previous = nullptr;\n        \n        while (current)\n        {\n            if (current->m_size >= size)\n            {\n                Block* newBlock = current->splitBlock(size, current->m_next);\n                if (newBlock == NULL)\n                {\n                    newBlock = current->m_next;\n                }\n                previous ? previous->m_next = newBlock : m_freeList = newBlock;\n                return current->getDataStartPtr();\n            }\n\n            previous = current;\n            current = current->m_next;\n        }\n        \n        return nullptr;\n    }\n\n    void dealloc(void *ptr)\n    {\n        if ((size_t)ptr < (size_t)m_poolData || (size_t)ptr >= (size_t)m_poolData + m_size)\n        {\n            assert(0);\n        }\n\n        Block* block = Block::ptr2Block(ptr);\n        assert(block->verify());\n\n        std::lock_guard<std::mutex> lock(m_mtx);\n\n        Block* current = m_freeList;\n        Block* previous = nullptr;\n        while (current && (size_t)current < (size_t)block)\n        {\n            previous = current;\n            current = current->m_next;\n        }\n\n        block->m_next = current;\n        previous ? previous->m_next = block : m_freeList = block;\n        mergeBlock(block, previous, current);\n    }\n};\n\n\nMemPool::MemPool()\n{\n    m_impl = new Impl();\n\n}\n\nMemPool::~MemPool()\n{\n    delete m_impl;\n}\n\nMemPool &MemPool::instance()\n{\n    static MemPool obj;\n    return obj;\n}\n\nvoid MemPool::reset_buff(void *ptr, size_t size)\n{\n    m_impl->reset_buff(ptr, size);\n}\n\nvoid *MemPool::alloc(size_t size)\n{\n    return m_impl->alloc(size);\n}\n\nvoid MemPool::dealloc(void *ptr)\n{\n    m_impl->dealloc(ptr);\n}\n\n```\n# 基于std::list的内存池\n优点是管理信息的内存（std::list分配）和分配的内存(m_poolData)是分离的，如果业务的代码内存越界，大概率不会影响内存池的运行，可以正常释放内存地址对齐后的内存；缺点std::list需要消耗额外的内存维护内存信息的链表，性能上比单链表low那么一丢丢\n\n```cpp\n#include <assert.h>\n#include <stdint.h>\n#include <list>\n#include <mutex>\n#include <algorithm>\n#include \"mempool.h\"\n\nstruct Block\n{\n    void* m_data;\n    size_t m_size;\n    bool m_isFree;\n    Block(void *data, size_t size): m_size(size), m_data(data){ m_isFree = true; };\n};\n\nclass MemPool::Impl\n{\n    std::list<Block> m_memList;\n    size_t m_size;\n    void* m_poolData;\n    std::mutex m_mtx;\n        \n    void mergeBlock(std::list<Block>::iterator& it)\n    {\n        auto nextIt = std::next(it);\n        if (nextIt != m_memList.end() && nextIt->m_isFree)\n        {\n            it->m_size += nextIt->m_size;\n            m_memList.erase(nextIt);\n        }\n\n        if (it != m_memList.begin())\n        {\n            auto prevIt = std::prev(it);\n            if (prevIt->m_isFree)\n            {\n                prevIt->m_size += it->m_size;\n                it = m_memList.erase(it);\n            }\n        }\n    }\n\n    inline void splitBlock(std::list<Block>::iterator& it, size_t size)\n    {\n        it->m_isFree = false;\n        if (it->m_size > size)\n        {\n            size_t freeSize = it->m_size - size;\n            it->m_size = size;\n            m_memList.emplace(std::next(it), (uint8_t*)it->m_data + size, freeSize);\n        }\n    }\n\npublic:\n    Impl()\n    {\n        m_poolData = nullptr;\n        m_size = 0;\n    };\n\n    void reset_buff(void *ptr, size_t size)\n    {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_poolData = ptr;\n        m_size = size;\n        m_memList.clear();\n        m_memList.emplace_back(ptr, size);\n    }\n    \n    void *alloc(size_t size)\n    {\n        if (size == 0) return nullptr;\n\n        std::lock_guard<std::mutex> lock(m_mtx);\n\n        for (auto it = m_memList.begin(); it != m_memList.end(); it++)\n        {\n            if (it->m_isFree && it->m_size >= size)\n            {\n                splitBlock(it, size);\n                return it->m_data;\n            }\n        }\n\n        return nullptr;\n    }\n\n    void dealloc(void *ptr)\n    {\n        if ((size_t)ptr < (size_t)m_poolData || (size_t)ptr >= (size_t)m_poolData + m_size)\n        {\n            assert(0);\n        }\n\n        std::lock_guard<std::mutex> lock(m_mtx);\n        auto it = std::find_if(m_memList.begin(), m_memList.end(), [ptr](const Block& ele){ return !ele.m_isFree && (size_t)ptr >= (size_t)ele.m_data && (size_t)ptr < (size_t)ele.m_data + ele.m_size; });\n        if (it == m_memList.end())\n        {\n            assert(0);\n        }\n\n        it->m_isFree = true;\n        mergeBlock(it);\n    }\n};\n\n\nMemPool::MemPool()\n{\n    m_impl = new Impl();\n\n}\n\nMemPool::~MemPool()\n{\n    delete m_impl;\n}\n\nMemPool &MemPool::instance()\n{\n    static MemPool obj;\n    return obj;\n}\n\nvoid MemPool::reset_buff(void *ptr, size_t size)\n{\n    m_impl->reset_buff(ptr, size);\n}\n\nvoid *MemPool::alloc(size_t size)\n{\n    return m_impl->alloc(size);\n}\n\nvoid MemPool::dealloc(void *ptr)\n{\n    m_impl->dealloc(ptr);\n}\n\n```\n\n","slug":"内存池","published":true,"updated":"2025-03-10T13:18:27.361Z","_id":"cm8339610001mi0q68bkr8t5y","comments":true,"layout":"post","photos":[],"html":"<p>内存池</p>\n<span id=\"more\"></span>\n\n<h1 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h1><figure class=\"highlight h\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __MEMPOOL_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __MEMPOOL_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MemPool</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Impl</span>;</span></span><br><span class=\"line\">    Impl *m_impl;</span><br><span class=\"line\">    MemPool();</span><br><span class=\"line\">    ~MemPool();</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">static</span> MemPool &amp;<span class=\"title function_\">instance</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">void</span> <span class=\"title function_\">reset_buff</span><span class=\"params\">(<span class=\"type\">void</span> *ptr, <span class=\"type\">size_t</span> size)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">void</span> *<span class=\"title function_\">alloc</span><span class=\"params\">(<span class=\"type\">size_t</span> size)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">void</span> <span class=\"title function_\">dealloc</span><span class=\"params\">(<span class=\"type\">void</span> *ptr)</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> malloc(a) MemPool::instance().alloc(a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> free(a) MemPool::instance().dealloc(a)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"基于单向链表的内存池\"><a href=\"#基于单向链表的内存池\" class=\"headerlink\" title=\"基于单向链表的内存池\"></a>基于单向链表的内存池</h1><p>优点是不需要分配管理的内存，性能高，节省内存，缺点是业务的代码如果内存越界，可能会影响内存池的运行；如果业务释放的内存地址是申请内存对齐后的内存，无法正常释放</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mempool.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAGIC_NUMBER (0xafafafafu)</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Block</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Block* m_next;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> m_size;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> m_magic = MAGIC_NUMBER;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Block</span>(<span class=\"type\">uint32_t</span> size): <span class=\"built_in\">m_size</span>(size)&#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Block</span>(<span class=\"type\">uint32_t</span> size, Block* next): <span class=\"built_in\">m_size</span>(size), <span class=\"built_in\">m_next</span>(next)&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> Block* <span class=\"title\">splitBlock</span><span class=\"params\">(<span class=\"type\">uint32_t</span> size, Block* next)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_size &lt;= size + <span class=\"built_in\">sizeof</span>(Block)) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        Block* newBlock = <span class=\"built_in\">new</span> (<span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">uint8_t</span>*&gt;(<span class=\"built_in\">getDataStartPtr</span>()) + size) <span class=\"built_in\">Block</span>(m_size - size - <span class=\"built_in\">sizeof</span>(Block), next);</span><br><span class=\"line\">        m_size = size;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newBlock;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"title\">verify</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_magic == MAGIC_NUMBER;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span>* <span class=\"title\">getDataStartPtr</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span>* <span class=\"title\">getDataEndPtr</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">uint8_t</span>*)<span class=\"built_in\">getDataStartPtr</span>() + m_size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> <span class=\"keyword\">inline</span> Block* <span class=\"title\">ptr2Block</span><span class=\"params\">(<span class=\"type\">void</span>* ptr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Block*)ptr - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MemPool</span>::Impl</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Block* m_freeList;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> m_size;</span><br><span class=\"line\">    <span class=\"type\">void</span>* m_poolData;</span><br><span class=\"line\">    std::mutex m_mtx;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mergeBlock</span><span class=\"params\">(Block* current, Block* previous, Block* next)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (previous &amp;&amp; (<span class=\"type\">size_t</span>)previous-&gt;<span class=\"built_in\">getDataEndPtr</span>() == (<span class=\"type\">size_t</span>)current)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            previous-&gt;m_size += current-&gt;m_size + <span class=\"built_in\">sizeof</span>(Block);</span><br><span class=\"line\">            previous-&gt;m_next = next;</span><br><span class=\"line\">            current = previous;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next &amp;&amp; (<span class=\"type\">size_t</span>)current-&gt;<span class=\"built_in\">getDataEndPtr</span>() == (<span class=\"type\">size_t</span>)next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            current-&gt;m_size += next-&gt;m_size + <span class=\"built_in\">sizeof</span>(Block);</span><br><span class=\"line\">            current-&gt;m_next = next-&gt;m_next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Impl</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_freeList = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        m_poolData = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        m_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reset_buff</span><span class=\"params\">(<span class=\"type\">void</span> *ptr, <span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_mtx)</span></span>;</span><br><span class=\"line\">        m_poolData = ptr;</span><br><span class=\"line\">        m_size = size;</span><br><span class=\"line\">        m_freeList = <span class=\"built_in\">new</span>(m_poolData) <span class=\"built_in\">Block</span>(size - <span class=\"built_in\">sizeof</span>(Block), <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> *<span class=\"title\">alloc</span><span class=\"params\">(<span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_mtx)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Block* current = m_freeList;</span><br><span class=\"line\">        Block* previous = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (current)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current-&gt;m_size &gt;= size)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Block* newBlock = current-&gt;<span class=\"built_in\">splitBlock</span>(size, current-&gt;m_next);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (newBlock == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    newBlock = current-&gt;m_next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                previous ? previous-&gt;m_next = newBlock : m_freeList = newBlock;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> current-&gt;<span class=\"built_in\">getDataStartPtr</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            previous = current;</span><br><span class=\"line\">            current = current-&gt;m_next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dealloc</span><span class=\"params\">(<span class=\"type\">void</span> *ptr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"type\">size_t</span>)ptr &lt; (<span class=\"type\">size_t</span>)m_poolData || (<span class=\"type\">size_t</span>)ptr &gt;= (<span class=\"type\">size_t</span>)m_poolData + m_size)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Block* block = Block::<span class=\"built_in\">ptr2Block</span>(ptr);</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(block-&gt;<span class=\"built_in\">verify</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_mtx)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Block* current = m_freeList;</span><br><span class=\"line\">        Block* previous = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (current &amp;&amp; (<span class=\"type\">size_t</span>)current &lt; (<span class=\"type\">size_t</span>)block)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            previous = current;</span><br><span class=\"line\">            current = current-&gt;m_next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        block-&gt;m_next = current;</span><br><span class=\"line\">        previous ? previous-&gt;m_next = block : m_freeList = block;</span><br><span class=\"line\">        <span class=\"built_in\">mergeBlock</span>(block, previous, current);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MemPool::<span class=\"built_in\">MemPool</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    m_impl = <span class=\"keyword\">new</span> <span class=\"built_in\">Impl</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MemPool::~<span class=\"built_in\">MemPool</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> m_impl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">MemPool &amp;<span class=\"title\">MemPool::instance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> MemPool obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MemPool::reset_buff</span><span class=\"params\">(<span class=\"type\">void</span> *ptr, <span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    m_impl-&gt;<span class=\"built_in\">reset_buff</span>(ptr, size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> *<span class=\"title\">MemPool::alloc</span><span class=\"params\">(<span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_impl-&gt;<span class=\"built_in\">alloc</span>(size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MemPool::dealloc</span><span class=\"params\">(<span class=\"type\">void</span> *ptr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    m_impl-&gt;<span class=\"built_in\">dealloc</span>(ptr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"基于std-list的内存池\"><a href=\"#基于std-list的内存池\" class=\"headerlink\" title=\"基于std::list的内存池\"></a>基于std::list的内存池</h1><p>优点是管理信息的内存（std::list分配）和分配的内存(m_poolData)是分离的，如果业务的代码内存越界，大概率不会影响内存池的运行，可以正常释放内存地址对齐后的内存；缺点std::list需要消耗额外的内存维护内存信息的链表，性能上比单链表low那么一丢丢</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mempool.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Block</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">void</span>* m_data;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> m_size;</span><br><span class=\"line\">    <span class=\"type\">bool</span> m_isFree;</span><br><span class=\"line\">    <span class=\"built_in\">Block</span>(<span class=\"type\">void</span> *data, <span class=\"type\">size_t</span> size): <span class=\"built_in\">m_size</span>(size), <span class=\"built_in\">m_data</span>(data)&#123; m_isFree = <span class=\"literal\">true</span>; &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MemPool</span>::Impl</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::list&lt;Block&gt; m_memList;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> m_size;</span><br><span class=\"line\">    <span class=\"type\">void</span>* m_poolData;</span><br><span class=\"line\">    std::mutex m_mtx;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mergeBlock</span><span class=\"params\">(std::list&lt;Block&gt;::iterator&amp; it)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> nextIt = std::<span class=\"built_in\">next</span>(it);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextIt != m_memList.<span class=\"built_in\">end</span>() &amp;&amp; nextIt-&gt;m_isFree)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            it-&gt;m_size += nextIt-&gt;m_size;</span><br><span class=\"line\">            m_memList.<span class=\"built_in\">erase</span>(nextIt);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it != m_memList.<span class=\"built_in\">begin</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> prevIt = std::<span class=\"built_in\">prev</span>(it);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prevIt-&gt;m_isFree)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                prevIt-&gt;m_size += it-&gt;m_size;</span><br><span class=\"line\">                it = m_memList.<span class=\"built_in\">erase</span>(it);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">splitBlock</span><span class=\"params\">(std::list&lt;Block&gt;::iterator&amp; it, <span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        it-&gt;m_isFree = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it-&gt;m_size &gt; size)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">size_t</span> freeSize = it-&gt;m_size - size;</span><br><span class=\"line\">            it-&gt;m_size = size;</span><br><span class=\"line\">            m_memList.<span class=\"built_in\">emplace</span>(std::<span class=\"built_in\">next</span>(it), (<span class=\"type\">uint8_t</span>*)it-&gt;m_data + size, freeSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Impl</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_poolData = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        m_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reset_buff</span><span class=\"params\">(<span class=\"type\">void</span> *ptr, <span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_mtx)</span></span>;</span><br><span class=\"line\">        m_poolData = ptr;</span><br><span class=\"line\">        m_size = size;</span><br><span class=\"line\">        m_memList.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        m_memList.<span class=\"built_in\">emplace_back</span>(ptr, size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> *<span class=\"title\">alloc</span><span class=\"params\">(<span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_mtx)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = m_memList.<span class=\"built_in\">begin</span>(); it != m_memList.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (it-&gt;m_isFree &amp;&amp; it-&gt;m_size &gt;= size)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">splitBlock</span>(it, size);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> it-&gt;m_data;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dealloc</span><span class=\"params\">(<span class=\"type\">void</span> *ptr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"type\">size_t</span>)ptr &lt; (<span class=\"type\">size_t</span>)m_poolData || (<span class=\"type\">size_t</span>)ptr &gt;= (<span class=\"type\">size_t</span>)m_poolData + m_size)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_mtx)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> it = std::<span class=\"built_in\">find_if</span>(m_memList.<span class=\"built_in\">begin</span>(), m_memList.<span class=\"built_in\">end</span>(), [ptr](<span class=\"type\">const</span> Block&amp; ele)&#123; <span class=\"keyword\">return</span> !ele.m_isFree &amp;&amp; (<span class=\"type\">size_t</span>)ptr &gt;= (<span class=\"type\">size_t</span>)ele.m_data &amp;&amp; (<span class=\"type\">size_t</span>)ptr &lt; (<span class=\"type\">size_t</span>)ele.m_data + ele.m_size; &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it == m_memList.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        it-&gt;m_isFree = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"built_in\">mergeBlock</span>(it);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MemPool::<span class=\"built_in\">MemPool</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    m_impl = <span class=\"keyword\">new</span> <span class=\"built_in\">Impl</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MemPool::~<span class=\"built_in\">MemPool</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> m_impl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">MemPool &amp;<span class=\"title\">MemPool::instance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> MemPool obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MemPool::reset_buff</span><span class=\"params\">(<span class=\"type\">void</span> *ptr, <span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    m_impl-&gt;<span class=\"built_in\">reset_buff</span>(ptr, size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> *<span class=\"title\">MemPool::alloc</span><span class=\"params\">(<span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_impl-&gt;<span class=\"built_in\">alloc</span>(size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MemPool::dealloc</span><span class=\"params\">(<span class=\"type\">void</span> *ptr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    m_impl-&gt;<span class=\"built_in\">dealloc</span>(ptr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","excerpt":"<p>内存池</p>","more":"<h1 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h1><figure class=\"highlight h\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __MEMPOOL_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __MEMPOOL_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MemPool</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Impl</span>;</span></span><br><span class=\"line\">    Impl *m_impl;</span><br><span class=\"line\">    MemPool();</span><br><span class=\"line\">    ~MemPool();</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">static</span> MemPool &amp;<span class=\"title function_\">instance</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">void</span> <span class=\"title function_\">reset_buff</span><span class=\"params\">(<span class=\"type\">void</span> *ptr, <span class=\"type\">size_t</span> size)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">void</span> *<span class=\"title function_\">alloc</span><span class=\"params\">(<span class=\"type\">size_t</span> size)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">void</span> <span class=\"title function_\">dealloc</span><span class=\"params\">(<span class=\"type\">void</span> *ptr)</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> malloc(a) MemPool::instance().alloc(a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> free(a) MemPool::instance().dealloc(a)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"基于单向链表的内存池\"><a href=\"#基于单向链表的内存池\" class=\"headerlink\" title=\"基于单向链表的内存池\"></a>基于单向链表的内存池</h1><p>优点是不需要分配管理的内存，性能高，节省内存，缺点是业务的代码如果内存越界，可能会影响内存池的运行；如果业务释放的内存地址是申请内存对齐后的内存，无法正常释放</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mempool.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAGIC_NUMBER (0xafafafafu)</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Block</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Block* m_next;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> m_size;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> m_magic = MAGIC_NUMBER;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Block</span>(<span class=\"type\">uint32_t</span> size): <span class=\"built_in\">m_size</span>(size)&#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Block</span>(<span class=\"type\">uint32_t</span> size, Block* next): <span class=\"built_in\">m_size</span>(size), <span class=\"built_in\">m_next</span>(next)&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> Block* <span class=\"title\">splitBlock</span><span class=\"params\">(<span class=\"type\">uint32_t</span> size, Block* next)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_size &lt;= size + <span class=\"built_in\">sizeof</span>(Block)) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        Block* newBlock = <span class=\"built_in\">new</span> (<span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">uint8_t</span>*&gt;(<span class=\"built_in\">getDataStartPtr</span>()) + size) <span class=\"built_in\">Block</span>(m_size - size - <span class=\"built_in\">sizeof</span>(Block), next);</span><br><span class=\"line\">        m_size = size;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newBlock;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"title\">verify</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_magic == MAGIC_NUMBER;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span>* <span class=\"title\">getDataStartPtr</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span>* <span class=\"title\">getDataEndPtr</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">uint8_t</span>*)<span class=\"built_in\">getDataStartPtr</span>() + m_size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> <span class=\"keyword\">inline</span> Block* <span class=\"title\">ptr2Block</span><span class=\"params\">(<span class=\"type\">void</span>* ptr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Block*)ptr - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MemPool</span>::Impl</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Block* m_freeList;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> m_size;</span><br><span class=\"line\">    <span class=\"type\">void</span>* m_poolData;</span><br><span class=\"line\">    std::mutex m_mtx;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mergeBlock</span><span class=\"params\">(Block* current, Block* previous, Block* next)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (previous &amp;&amp; (<span class=\"type\">size_t</span>)previous-&gt;<span class=\"built_in\">getDataEndPtr</span>() == (<span class=\"type\">size_t</span>)current)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            previous-&gt;m_size += current-&gt;m_size + <span class=\"built_in\">sizeof</span>(Block);</span><br><span class=\"line\">            previous-&gt;m_next = next;</span><br><span class=\"line\">            current = previous;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next &amp;&amp; (<span class=\"type\">size_t</span>)current-&gt;<span class=\"built_in\">getDataEndPtr</span>() == (<span class=\"type\">size_t</span>)next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            current-&gt;m_size += next-&gt;m_size + <span class=\"built_in\">sizeof</span>(Block);</span><br><span class=\"line\">            current-&gt;m_next = next-&gt;m_next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Impl</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_freeList = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        m_poolData = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        m_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reset_buff</span><span class=\"params\">(<span class=\"type\">void</span> *ptr, <span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_mtx)</span></span>;</span><br><span class=\"line\">        m_poolData = ptr;</span><br><span class=\"line\">        m_size = size;</span><br><span class=\"line\">        m_freeList = <span class=\"built_in\">new</span>(m_poolData) <span class=\"built_in\">Block</span>(size - <span class=\"built_in\">sizeof</span>(Block), <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> *<span class=\"title\">alloc</span><span class=\"params\">(<span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_mtx)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Block* current = m_freeList;</span><br><span class=\"line\">        Block* previous = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (current)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current-&gt;m_size &gt;= size)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Block* newBlock = current-&gt;<span class=\"built_in\">splitBlock</span>(size, current-&gt;m_next);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (newBlock == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    newBlock = current-&gt;m_next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                previous ? previous-&gt;m_next = newBlock : m_freeList = newBlock;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> current-&gt;<span class=\"built_in\">getDataStartPtr</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            previous = current;</span><br><span class=\"line\">            current = current-&gt;m_next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dealloc</span><span class=\"params\">(<span class=\"type\">void</span> *ptr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"type\">size_t</span>)ptr &lt; (<span class=\"type\">size_t</span>)m_poolData || (<span class=\"type\">size_t</span>)ptr &gt;= (<span class=\"type\">size_t</span>)m_poolData + m_size)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Block* block = Block::<span class=\"built_in\">ptr2Block</span>(ptr);</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(block-&gt;<span class=\"built_in\">verify</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_mtx)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Block* current = m_freeList;</span><br><span class=\"line\">        Block* previous = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (current &amp;&amp; (<span class=\"type\">size_t</span>)current &lt; (<span class=\"type\">size_t</span>)block)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            previous = current;</span><br><span class=\"line\">            current = current-&gt;m_next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        block-&gt;m_next = current;</span><br><span class=\"line\">        previous ? previous-&gt;m_next = block : m_freeList = block;</span><br><span class=\"line\">        <span class=\"built_in\">mergeBlock</span>(block, previous, current);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MemPool::<span class=\"built_in\">MemPool</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    m_impl = <span class=\"keyword\">new</span> <span class=\"built_in\">Impl</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MemPool::~<span class=\"built_in\">MemPool</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> m_impl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">MemPool &amp;<span class=\"title\">MemPool::instance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> MemPool obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MemPool::reset_buff</span><span class=\"params\">(<span class=\"type\">void</span> *ptr, <span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    m_impl-&gt;<span class=\"built_in\">reset_buff</span>(ptr, size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> *<span class=\"title\">MemPool::alloc</span><span class=\"params\">(<span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_impl-&gt;<span class=\"built_in\">alloc</span>(size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MemPool::dealloc</span><span class=\"params\">(<span class=\"type\">void</span> *ptr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    m_impl-&gt;<span class=\"built_in\">dealloc</span>(ptr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"基于std-list的内存池\"><a href=\"#基于std-list的内存池\" class=\"headerlink\" title=\"基于std::list的内存池\"></a>基于std::list的内存池</h1><p>优点是管理信息的内存（std::list分配）和分配的内存(m_poolData)是分离的，如果业务的代码内存越界，大概率不会影响内存池的运行，可以正常释放内存地址对齐后的内存；缺点std::list需要消耗额外的内存维护内存信息的链表，性能上比单链表low那么一丢丢</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mempool.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Block</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">void</span>* m_data;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> m_size;</span><br><span class=\"line\">    <span class=\"type\">bool</span> m_isFree;</span><br><span class=\"line\">    <span class=\"built_in\">Block</span>(<span class=\"type\">void</span> *data, <span class=\"type\">size_t</span> size): <span class=\"built_in\">m_size</span>(size), <span class=\"built_in\">m_data</span>(data)&#123; m_isFree = <span class=\"literal\">true</span>; &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MemPool</span>::Impl</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::list&lt;Block&gt; m_memList;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> m_size;</span><br><span class=\"line\">    <span class=\"type\">void</span>* m_poolData;</span><br><span class=\"line\">    std::mutex m_mtx;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mergeBlock</span><span class=\"params\">(std::list&lt;Block&gt;::iterator&amp; it)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> nextIt = std::<span class=\"built_in\">next</span>(it);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextIt != m_memList.<span class=\"built_in\">end</span>() &amp;&amp; nextIt-&gt;m_isFree)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            it-&gt;m_size += nextIt-&gt;m_size;</span><br><span class=\"line\">            m_memList.<span class=\"built_in\">erase</span>(nextIt);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it != m_memList.<span class=\"built_in\">begin</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> prevIt = std::<span class=\"built_in\">prev</span>(it);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prevIt-&gt;m_isFree)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                prevIt-&gt;m_size += it-&gt;m_size;</span><br><span class=\"line\">                it = m_memList.<span class=\"built_in\">erase</span>(it);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">splitBlock</span><span class=\"params\">(std::list&lt;Block&gt;::iterator&amp; it, <span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        it-&gt;m_isFree = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it-&gt;m_size &gt; size)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">size_t</span> freeSize = it-&gt;m_size - size;</span><br><span class=\"line\">            it-&gt;m_size = size;</span><br><span class=\"line\">            m_memList.<span class=\"built_in\">emplace</span>(std::<span class=\"built_in\">next</span>(it), (<span class=\"type\">uint8_t</span>*)it-&gt;m_data + size, freeSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Impl</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_poolData = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        m_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reset_buff</span><span class=\"params\">(<span class=\"type\">void</span> *ptr, <span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_mtx)</span></span>;</span><br><span class=\"line\">        m_poolData = ptr;</span><br><span class=\"line\">        m_size = size;</span><br><span class=\"line\">        m_memList.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        m_memList.<span class=\"built_in\">emplace_back</span>(ptr, size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> *<span class=\"title\">alloc</span><span class=\"params\">(<span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_mtx)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = m_memList.<span class=\"built_in\">begin</span>(); it != m_memList.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (it-&gt;m_isFree &amp;&amp; it-&gt;m_size &gt;= size)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">splitBlock</span>(it, size);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> it-&gt;m_data;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dealloc</span><span class=\"params\">(<span class=\"type\">void</span> *ptr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"type\">size_t</span>)ptr &lt; (<span class=\"type\">size_t</span>)m_poolData || (<span class=\"type\">size_t</span>)ptr &gt;= (<span class=\"type\">size_t</span>)m_poolData + m_size)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_mtx)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> it = std::<span class=\"built_in\">find_if</span>(m_memList.<span class=\"built_in\">begin</span>(), m_memList.<span class=\"built_in\">end</span>(), [ptr](<span class=\"type\">const</span> Block&amp; ele)&#123; <span class=\"keyword\">return</span> !ele.m_isFree &amp;&amp; (<span class=\"type\">size_t</span>)ptr &gt;= (<span class=\"type\">size_t</span>)ele.m_data &amp;&amp; (<span class=\"type\">size_t</span>)ptr &lt; (<span class=\"type\">size_t</span>)ele.m_data + ele.m_size; &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it == m_memList.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        it-&gt;m_isFree = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"built_in\">mergeBlock</span>(it);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MemPool::<span class=\"built_in\">MemPool</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    m_impl = <span class=\"keyword\">new</span> <span class=\"built_in\">Impl</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MemPool::~<span class=\"built_in\">MemPool</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> m_impl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">MemPool &amp;<span class=\"title\">MemPool::instance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> MemPool obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MemPool::reset_buff</span><span class=\"params\">(<span class=\"type\">void</span> *ptr, <span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    m_impl-&gt;<span class=\"built_in\">reset_buff</span>(ptr, size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> *<span class=\"title\">MemPool::alloc</span><span class=\"params\">(<span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_impl-&gt;<span class=\"built_in\">alloc</span>(size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MemPool::dealloc</span><span class=\"params\">(<span class=\"type\">void</span> *ptr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    m_impl-&gt;<span class=\"built_in\">dealloc</span>(ptr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","path":"2025/03/09/内存池/","permalink":"http://chengs.run/2025/03/09/%E5%86%85%E5%AD%98%E6%B1%A0/","tags":[{"name":"c/c++","_id":"cm83396140022i0q6abkhbgor","slug":"c-c","path":"tags/c-c/","permalink":"http://chengs.run/tags/c-c/","length":1}],"categories":[],"prev":null,"next":{"title":"imx6ull裸机开发(4)","date":"2025-02-28T05:41:50.000Z","slug":"imx6ull裸机开发(4)","published":true,"updated":"2025-03-10T13:18:27.352Z","_id":"cm833960s000xi0q6gpx1bjvq","layout":"post","photos":[],"excerpt":"<p>MMDC、RTC、I2C、SPI</p>","path":"2025/02/28/imx6ull裸机开发(4)/","permalink":"http://chengs.run/2025/02/28/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(4)/","__post":true},"__post":true}