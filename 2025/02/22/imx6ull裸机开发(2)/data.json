{"title":"imx6ull裸机开发(2)","date":"2025-02-22T14:55:20.555Z","source":"_posts/imx6ull裸机开发(2).md","raw":"---\ntitle: imx6ull裸机开发(2)\ndate: 2025-02-22 22:55:20.555\nupdated: 2025-02-23 01:36:08.118\ncategories: \ntags: \n- imx6ull\n---\nGIC介绍、中断函数过程\n<!-- more -->\n# 中断\n## Cortex-A7中断向量表\n![image-1740234495366](imx6ull裸机开发(2)/image-1740234495366.png)\n\n## 中断向量偏移\n\n\n## GIC 控制器总览\n![image-1740234738116](imx6ull裸机开发(2)/image-1740234738116.png)\n\n![image-1740234911563](imx6ull裸机开发(2)/image-1740234911563.png)\n- SPI(Shared Peripheral Interrupt),共享中断，顾名思义，所有 Core 共享的中断，这个是最常见的，那些外部中断都属于 SPI 中断 。比如按键中断、串口中断等等，这些中断所有的 Core 都可以处理，不限定特定 Core。\n- PPI(Private Peripheral Interrupt)，私有中断，我们说了 GIC 是支持多核的，每个核肯定有自己独有的中断。这些独有的中断肯定是要指定的核心处理，因此这些中断就叫做私有中断。\n- SGI(Software-generated Interrupt)，软件中断，由软件触发引起的中断，通过向寄存器GICD_SGIR 写入数据来触发，系统会使用 SGI 中断来完成多核之间的通信\n\n## 中断 ID\n![image-1740235664964](imx6ull裸机开发(2)/image-1740235664964.png)\n\n对于imx6ull 可以在参考手册中查询其中断号，见下图\n\n![image-1740236100526](imx6ull裸机开发(2)/image-1740236100526.png)\n\n## CP15协处理器\n![image-1740237093975](imx6ull裸机开发(2)/image-1740237093975.png)\n\n## Reset_Handler函数工作\n- 关闭中断\n![image-1740239658742](imx6ull裸机开发(2)/image-1740239658742.png)\n- 关闭I/D Cache MMU 分支预测 （控制SCTLR寄存器）\n![image-1740237624680](imx6ull裸机开发(2)/image-1740237624680.png)\n![image-1740237670726](imx6ull裸机开发(2)/image-1740237670726.png)\n- 配置VBAR\n隔离指令\n![image-1740238921282](imx6ull裸机开发(2)/image-1740238921282.png)\n配置VBAR\n![image-1740238831117](imx6ull裸机开发(2)/image-1740238831117.png)\n- 清除BSS段\n- 设置对应中断模式的SP指针\n- 开启中断\n- 跳到main函数\n\n## IRQ_Handler函数工作\n- 压栈 lr spsr 等\n- 读取c15 CBAR寄存器 获取GIC控制器的基地址，访问GIC控制器的寄存器\n![image-1740240258166](imx6ull裸机开发(2)/image-1740240258166.png)\n- 获取到GIC控制器CPU端基地址\n![image-1740240535654](imx6ull裸机开发(2)/image-1740240535654.png)\n- 获取到CPU端的GICC_IAR寄存器\n![image-1740240602221](imx6ull裸机开发(2)/image-1740240602221.png)\n- 进入到svc模式（可以再次进入中断）\n- 跳转到C语言的system_irqhandler函数，传入GIC控制器地址和GICC_IAR寄存器 ,通过低9位获取到中断ID\n![image-1740240804618](imx6ull裸机开发(2)/image-1740240804618.png)\n- 进入到IRQ模式 \n- 将GICC_IAR寄存器的值（对应的中断ID）写入到GICC_EOIR中\n![image-1740241210508](imx6ull裸机开发(2)/image-1740241210508.png)\n- 出栈lr spsr 恢复spsr 将lr-4赋给pc（ARM流水线）\n\n## 配置imx6ull IO的中断寄存器\n- 配置ICR寄存器\n![image-1740243309673](imx6ull裸机开发(2)/image-1740243309673.png)\n- 配置IMR寄存器\n![image-1740243331505](imx6ull裸机开发(2)/image-1740243331505.png)\n- 使能GIC控制器对应的中断号，配置其优先级，注册对应中断号的函数\n- 中断发生后配置ISR寄存器写1\n![image-1740243385044](imx6ull裸机开发(2)/image-1740243385044.png)\n\n\n\n\n","slug":"imx6ull裸机开发(2)","published":true,"updated":"2025-02-22T17:36:08.118Z","_id":"cm833960q000qi0q6agka6dgl","comments":true,"layout":"post","photos":[],"html":"<p>GIC介绍、中断函数过程</p>\n<span id=\"more\"></span>\n<h1 id=\"中断\"><a href=\"#中断\" class=\"headerlink\" title=\"中断\"></a>中断</h1><h2 id=\"Cortex-A7中断向量表\"><a href=\"#Cortex-A7中断向量表\" class=\"headerlink\" title=\"Cortex-A7中断向量表\"></a>Cortex-A7中断向量表</h2><p><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740234495366.png\" alt=\"image-1740234495366\"></p>\n<h2 id=\"中断向量偏移\"><a href=\"#中断向量偏移\" class=\"headerlink\" title=\"中断向量偏移\"></a>中断向量偏移</h2><h2 id=\"GIC-控制器总览\"><a href=\"#GIC-控制器总览\" class=\"headerlink\" title=\"GIC 控制器总览\"></a>GIC 控制器总览</h2><p><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740234738116.png\" alt=\"image-1740234738116\"></p>\n<p><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740234911563.png\" alt=\"image-1740234911563\"></p>\n<ul>\n<li>SPI(Shared Peripheral Interrupt),共享中断，顾名思义，所有 Core 共享的中断，这个是最常见的，那些外部中断都属于 SPI 中断 。比如按键中断、串口中断等等，这些中断所有的 Core 都可以处理，不限定特定 Core。</li>\n<li>PPI(Private Peripheral Interrupt)，私有中断，我们说了 GIC 是支持多核的，每个核肯定有自己独有的中断。这些独有的中断肯定是要指定的核心处理，因此这些中断就叫做私有中断。</li>\n<li>SGI(Software-generated Interrupt)，软件中断，由软件触发引起的中断，通过向寄存器GICD_SGIR 写入数据来触发，系统会使用 SGI 中断来完成多核之间的通信</li>\n</ul>\n<h2 id=\"中断-ID\"><a href=\"#中断-ID\" class=\"headerlink\" title=\"中断 ID\"></a>中断 ID</h2><p><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740235664964.png\" alt=\"image-1740235664964\"></p>\n<p>对于imx6ull 可以在参考手册中查询其中断号，见下图</p>\n<p><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740236100526.png\" alt=\"image-1740236100526\"></p>\n<h2 id=\"CP15协处理器\"><a href=\"#CP15协处理器\" class=\"headerlink\" title=\"CP15协处理器\"></a>CP15协处理器</h2><p><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740237093975.png\" alt=\"image-1740237093975\"></p>\n<h2 id=\"Reset-Handler函数工作\"><a href=\"#Reset-Handler函数工作\" class=\"headerlink\" title=\"Reset_Handler函数工作\"></a>Reset_Handler函数工作</h2><ul>\n<li>关闭中断<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740239658742.png\" alt=\"image-1740239658742\"></li>\n<li>关闭I&#x2F;D Cache MMU 分支预测 （控制SCTLR寄存器）<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740237624680.png\" alt=\"image-1740237624680\"><br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740237670726.png\" alt=\"image-1740237670726\"></li>\n<li>配置VBAR<br>隔离指令<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740238921282.png\" alt=\"image-1740238921282\"><br>配置VBAR<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740238831117.png\" alt=\"image-1740238831117\"></li>\n<li>清除BSS段</li>\n<li>设置对应中断模式的SP指针</li>\n<li>开启中断</li>\n<li>跳到main函数</li>\n</ul>\n<h2 id=\"IRQ-Handler函数工作\"><a href=\"#IRQ-Handler函数工作\" class=\"headerlink\" title=\"IRQ_Handler函数工作\"></a>IRQ_Handler函数工作</h2><ul>\n<li>压栈 lr spsr 等</li>\n<li>读取c15 CBAR寄存器 获取GIC控制器的基地址，访问GIC控制器的寄存器<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740240258166.png\" alt=\"image-1740240258166\"></li>\n<li>获取到GIC控制器CPU端基地址<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740240535654.png\" alt=\"image-1740240535654\"></li>\n<li>获取到CPU端的GICC_IAR寄存器<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740240602221.png\" alt=\"image-1740240602221\"></li>\n<li>进入到svc模式（可以再次进入中断）</li>\n<li>跳转到C语言的system_irqhandler函数，传入GIC控制器地址和GICC_IAR寄存器 ,通过低9位获取到中断ID<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740240804618.png\" alt=\"image-1740240804618\"></li>\n<li>进入到IRQ模式 </li>\n<li>将GICC_IAR寄存器的值（对应的中断ID）写入到GICC_EOIR中<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740241210508.png\" alt=\"image-1740241210508\"></li>\n<li>出栈lr spsr 恢复spsr 将lr-4赋给pc（ARM流水线）</li>\n</ul>\n<h2 id=\"配置imx6ull-IO的中断寄存器\"><a href=\"#配置imx6ull-IO的中断寄存器\" class=\"headerlink\" title=\"配置imx6ull IO的中断寄存器\"></a>配置imx6ull IO的中断寄存器</h2><ul>\n<li>配置ICR寄存器<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740243309673.png\" alt=\"image-1740243309673\"></li>\n<li>配置IMR寄存器<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740243331505.png\" alt=\"image-1740243331505\"></li>\n<li>使能GIC控制器对应的中断号，配置其优先级，注册对应中断号的函数</li>\n<li>中断发生后配置ISR寄存器写1<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740243385044.png\" alt=\"image-1740243385044\"></li>\n</ul>\n","excerpt":"<p>GIC介绍、中断函数过程</p>","more":"<h1 id=\"中断\"><a href=\"#中断\" class=\"headerlink\" title=\"中断\"></a>中断</h1><h2 id=\"Cortex-A7中断向量表\"><a href=\"#Cortex-A7中断向量表\" class=\"headerlink\" title=\"Cortex-A7中断向量表\"></a>Cortex-A7中断向量表</h2><p><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740234495366.png\" alt=\"image-1740234495366\"></p>\n<h2 id=\"中断向量偏移\"><a href=\"#中断向量偏移\" class=\"headerlink\" title=\"中断向量偏移\"></a>中断向量偏移</h2><h2 id=\"GIC-控制器总览\"><a href=\"#GIC-控制器总览\" class=\"headerlink\" title=\"GIC 控制器总览\"></a>GIC 控制器总览</h2><p><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740234738116.png\" alt=\"image-1740234738116\"></p>\n<p><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740234911563.png\" alt=\"image-1740234911563\"></p>\n<ul>\n<li>SPI(Shared Peripheral Interrupt),共享中断，顾名思义，所有 Core 共享的中断，这个是最常见的，那些外部中断都属于 SPI 中断 。比如按键中断、串口中断等等，这些中断所有的 Core 都可以处理，不限定特定 Core。</li>\n<li>PPI(Private Peripheral Interrupt)，私有中断，我们说了 GIC 是支持多核的，每个核肯定有自己独有的中断。这些独有的中断肯定是要指定的核心处理，因此这些中断就叫做私有中断。</li>\n<li>SGI(Software-generated Interrupt)，软件中断，由软件触发引起的中断，通过向寄存器GICD_SGIR 写入数据来触发，系统会使用 SGI 中断来完成多核之间的通信</li>\n</ul>\n<h2 id=\"中断-ID\"><a href=\"#中断-ID\" class=\"headerlink\" title=\"中断 ID\"></a>中断 ID</h2><p><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740235664964.png\" alt=\"image-1740235664964\"></p>\n<p>对于imx6ull 可以在参考手册中查询其中断号，见下图</p>\n<p><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740236100526.png\" alt=\"image-1740236100526\"></p>\n<h2 id=\"CP15协处理器\"><a href=\"#CP15协处理器\" class=\"headerlink\" title=\"CP15协处理器\"></a>CP15协处理器</h2><p><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740237093975.png\" alt=\"image-1740237093975\"></p>\n<h2 id=\"Reset-Handler函数工作\"><a href=\"#Reset-Handler函数工作\" class=\"headerlink\" title=\"Reset_Handler函数工作\"></a>Reset_Handler函数工作</h2><ul>\n<li>关闭中断<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740239658742.png\" alt=\"image-1740239658742\"></li>\n<li>关闭I&#x2F;D Cache MMU 分支预测 （控制SCTLR寄存器）<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740237624680.png\" alt=\"image-1740237624680\"><br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740237670726.png\" alt=\"image-1740237670726\"></li>\n<li>配置VBAR<br>隔离指令<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740238921282.png\" alt=\"image-1740238921282\"><br>配置VBAR<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740238831117.png\" alt=\"image-1740238831117\"></li>\n<li>清除BSS段</li>\n<li>设置对应中断模式的SP指针</li>\n<li>开启中断</li>\n<li>跳到main函数</li>\n</ul>\n<h2 id=\"IRQ-Handler函数工作\"><a href=\"#IRQ-Handler函数工作\" class=\"headerlink\" title=\"IRQ_Handler函数工作\"></a>IRQ_Handler函数工作</h2><ul>\n<li>压栈 lr spsr 等</li>\n<li>读取c15 CBAR寄存器 获取GIC控制器的基地址，访问GIC控制器的寄存器<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740240258166.png\" alt=\"image-1740240258166\"></li>\n<li>获取到GIC控制器CPU端基地址<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740240535654.png\" alt=\"image-1740240535654\"></li>\n<li>获取到CPU端的GICC_IAR寄存器<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740240602221.png\" alt=\"image-1740240602221\"></li>\n<li>进入到svc模式（可以再次进入中断）</li>\n<li>跳转到C语言的system_irqhandler函数，传入GIC控制器地址和GICC_IAR寄存器 ,通过低9位获取到中断ID<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740240804618.png\" alt=\"image-1740240804618\"></li>\n<li>进入到IRQ模式 </li>\n<li>将GICC_IAR寄存器的值（对应的中断ID）写入到GICC_EOIR中<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740241210508.png\" alt=\"image-1740241210508\"></li>\n<li>出栈lr spsr 恢复spsr 将lr-4赋给pc（ARM流水线）</li>\n</ul>\n<h2 id=\"配置imx6ull-IO的中断寄存器\"><a href=\"#配置imx6ull-IO的中断寄存器\" class=\"headerlink\" title=\"配置imx6ull IO的中断寄存器\"></a>配置imx6ull IO的中断寄存器</h2><ul>\n<li>配置ICR寄存器<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740243309673.png\" alt=\"image-1740243309673\"></li>\n<li>配置IMR寄存器<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740243331505.png\" alt=\"image-1740243331505\"></li>\n<li>使能GIC控制器对应的中断号，配置其优先级，注册对应中断号的函数</li>\n<li>中断发生后配置ISR寄存器写1<br><img src=\"/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/image-1740243385044.png\" alt=\"image-1740243385044\"></li>\n</ul>","path":"2025/02/22/imx6ull裸机开发(2)/","permalink":"http://chengs.run/2025/02/22/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(2)/","tags":[{"name":"imx6ull","_id":"cm833960s000wi0q61oy1go6a","slug":"imx6ull","path":"tags/imx6ull/","permalink":"http://chengs.run/tags/imx6ull/","length":4}],"categories":[],"prev":{"title":"imx6ull裸机开发(3)","date":"2025-02-23T04:39:02.637Z","slug":"imx6ull裸机开发(3)","published":true,"updated":"2025-02-23T12:38:29.902Z","_id":"cm833960r000ti0q6gotsa4w0","layout":"post","photos":[],"excerpt":"<p>EPIT、GPT、UART</p>","path":"2025/02/23/imx6ull裸机开发(3)/","permalink":"http://chengs.run/2025/02/23/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(3)/","__post":true},"next":{"title":"imx6ull裸机开发(1)","date":"2025-02-21T15:09:11.091Z","slug":"imx6ull裸机开发(1)","published":true,"updated":"2025-02-22T14:17:56.885Z","_id":"cm833960n000li0q6929qavvb","layout":"post","photos":[],"excerpt":"<p>IO使用、时钟、Cortex-A7 ArmV7介绍</p>","path":"2025/02/21/imx6ull裸机开发(1)/","permalink":"http://chengs.run/2025/02/21/imx6ull%E8%A3%B8%E6%9C%BA%E5%BC%80%E5%8F%91(1)/","__post":true},"__post":true}