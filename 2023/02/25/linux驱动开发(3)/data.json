{"title":"linux驱动开发(3)","date":"2023-02-25T17:30:11.506Z","source":"_posts/linux驱动开发(3).md","raw":"---\ntitle: linux驱动开发(3)\ndate: 2023-02-26 01:30:11.506\nupdated: 2023-02-26 01:31:03.345\ncategories: \ntags: \n- linux驱动开发\n- linux\n---\n新字符设备驱动\n<!-- more -->\n## 分配和释放设备号\n```c\nint alloc_chrdev_region(dev_t *dev, unsigned baseminor, unsigned count, const char *name)\nint register_chrdev_region(dev_t from, unsigned count, const char *name)\nvoid unregister_chrdev_region(dev_t from, unsigned count)\n\nusage:\nint major;\nint minor;\ndev_t devid;\n\nif(major){\n    devid = MKDEV(major, minor);\n    register_chrdev_region(devid, 1, \"test\");\n}else{\n    alloc_chrdev_region(&devid, 0, 1, \"test\");\n    major = MAJOR(devid);\n    minor = MINOR(devid);\n}\n\nunregister_chrdev_region(devid, 1);\n```\n## 新字符设备注册方法\n```c\n# include/linux/cdev.h\nvoid cdev_init(struct *cdev, const struct file_operations *fops)\nint cdev_add(struct cdev *p, dev_t dev, unsigned count)\nvoid cdev_del(struct cdev *p)\n```\n## 自动创建设备节点\n不需要使用mknod命令\nudev: linux下一个应用程序，用于设备文件的创建和删除，使用busybox构建跟文件系统时，会创建一个简化版的udev---->mdev，所以在rcS文件中存在以下语句：\n```sh\necho /sbin/mdev > /proc/sys/kernel/hotplug\n```\n自动创建设备节点需要一个class类\n```c\n# include/linux/device.h\n\n#define class_create(owner, name)\n({\n    static struct lock_class_ket __key;\n    __class_create(owner, name, &__key);\n})\n\nstruct class *__class_create(struct module *owner, const char *name, struct lock_class_key *key)\n\nvoid class_destroy(struct class *cls);\n```\n创建设备\n```c\nstruct device *device_create(struct class *class\n                             struct device *parent,\n                             dev_t devt,\n                             void *drvdata,\n                             const char *fmt, ...)\nvoid device_destroy(struct class *class, dev_t devt)\n```\n\n\n\n","slug":"linux驱动开发(3)","published":true,"updated":"2023-02-25T17:31:03.345Z","_id":"cm833960w001ai0q6e5x18ch1","comments":true,"layout":"post","photos":[],"html":"<p>新字符设备驱动</p>\n<span id=\"more\"></span>\n<h2 id=\"分配和释放设备号\"><a href=\"#分配和释放设备号\" class=\"headerlink\" title=\"分配和释放设备号\"></a>分配和释放设备号</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">alloc_chrdev_region</span><span class=\"params\">(<span class=\"type\">dev_t</span> *dev, <span class=\"type\">unsigned</span> baseminor, <span class=\"type\">unsigned</span> count, <span class=\"type\">const</span> <span class=\"type\">char</span> *name)</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">register_chrdev_region</span><span class=\"params\">(<span class=\"type\">dev_t</span> from, <span class=\"type\">unsigned</span> count, <span class=\"type\">const</span> <span class=\"type\">char</span> *name)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">unregister_chrdev_region</span><span class=\"params\">(<span class=\"type\">dev_t</span> from, <span class=\"type\">unsigned</span> count)</span></span><br><span class=\"line\"></span><br><span class=\"line\">usage:</span><br><span class=\"line\"><span class=\"type\">int</span> major;</span><br><span class=\"line\"><span class=\"type\">int</span> minor;</span><br><span class=\"line\"><span class=\"type\">dev_t</span> devid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(major)&#123;</span><br><span class=\"line\">    devid = MKDEV(major, minor);</span><br><span class=\"line\">    register_chrdev_region(devid, <span class=\"number\">1</span>, <span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    alloc_chrdev_region(&amp;devid, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    major = MAJOR(devid);</span><br><span class=\"line\">    minor = MINOR(devid);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">unregister_chrdev_region(devid, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"新字符设备注册方法\"><a href=\"#新字符设备注册方法\" class=\"headerlink\" title=\"新字符设备注册方法\"></a>新字符设备注册方法</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">include</span>/linux/cdev.h</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">cdev_init</span><span class=\"params\">(<span class=\"keyword\">struct</span> *cdev, <span class=\"type\">const</span> <span class=\"keyword\">struct</span> file_operations *fops)</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">cdev_add</span><span class=\"params\">(<span class=\"keyword\">struct</span> cdev *p, <span class=\"type\">dev_t</span> dev, <span class=\"type\">unsigned</span> count)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">cdev_del</span><span class=\"params\">(<span class=\"keyword\">struct</span> cdev *p)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"自动创建设备节点\"><a href=\"#自动创建设备节点\" class=\"headerlink\" title=\"自动创建设备节点\"></a>自动创建设备节点</h2><p>不需要使用mknod命令<br>udev: linux下一个应用程序，用于设备文件的创建和删除，使用busybox构建跟文件系统时，会创建一个简化版的udev—-&gt;mdev，所以在rcS文件中存在以下语句：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> /sbin/mdev &gt; /proc/sys/kernel/hotplug</span><br></pre></td></tr></table></figure>\n<p>自动创建设备节点需要一个class类</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">include</span>/linux/device.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> class_create(owner, name)</span></span><br><span class=\"line\">(&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"keyword\">struct</span> lock_class_ket __key;</span><br><span class=\"line\">    __class_create(owner, name, &amp;__key);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"keyword\">class</span> *__<span class=\"title\">class_create</span>(<span class=\"keyword\">struct</span> <span class=\"title\">module</span> *<span class=\"title\">owner</span>, <span class=\"title\">const</span> <span class=\"title\">char</span> *<span class=\"title\">name</span>, <span class=\"keyword\">struct</span> <span class=\"title\">lock_class_key</span> *<span class=\"title\">key</span>)</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">class_destroy</span>(<span class=\"keyword\">struct</span> <span class=\"keyword\">class</span> *<span class=\"title\">cls</span>);</span></span><br></pre></td></tr></table></figure>\n<p>创建设备</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> device *<span class=\"title function_\">device_create</span><span class=\"params\">(<span class=\"keyword\">struct</span> class *class</span></span><br><span class=\"line\"><span class=\"params\">                             <span class=\"keyword\">struct</span> device *parent,</span></span><br><span class=\"line\"><span class=\"params\">                             <span class=\"type\">dev_t</span> devt,</span></span><br><span class=\"line\"><span class=\"params\">                             <span class=\"type\">void</span> *drvdata,</span></span><br><span class=\"line\"><span class=\"params\">                             <span class=\"type\">const</span> <span class=\"type\">char</span> *fmt, ...)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">device_destroy</span><span class=\"params\">(<span class=\"keyword\">struct</span> class *class, <span class=\"type\">dev_t</span> devt)</span></span><br></pre></td></tr></table></figure>\n\n\n\n","excerpt":"<p>新字符设备驱动</p>","more":"<h2 id=\"分配和释放设备号\"><a href=\"#分配和释放设备号\" class=\"headerlink\" title=\"分配和释放设备号\"></a>分配和释放设备号</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">alloc_chrdev_region</span><span class=\"params\">(<span class=\"type\">dev_t</span> *dev, <span class=\"type\">unsigned</span> baseminor, <span class=\"type\">unsigned</span> count, <span class=\"type\">const</span> <span class=\"type\">char</span> *name)</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">register_chrdev_region</span><span class=\"params\">(<span class=\"type\">dev_t</span> from, <span class=\"type\">unsigned</span> count, <span class=\"type\">const</span> <span class=\"type\">char</span> *name)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">unregister_chrdev_region</span><span class=\"params\">(<span class=\"type\">dev_t</span> from, <span class=\"type\">unsigned</span> count)</span></span><br><span class=\"line\"></span><br><span class=\"line\">usage:</span><br><span class=\"line\"><span class=\"type\">int</span> major;</span><br><span class=\"line\"><span class=\"type\">int</span> minor;</span><br><span class=\"line\"><span class=\"type\">dev_t</span> devid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(major)&#123;</span><br><span class=\"line\">    devid = MKDEV(major, minor);</span><br><span class=\"line\">    register_chrdev_region(devid, <span class=\"number\">1</span>, <span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    alloc_chrdev_region(&amp;devid, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    major = MAJOR(devid);</span><br><span class=\"line\">    minor = MINOR(devid);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">unregister_chrdev_region(devid, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"新字符设备注册方法\"><a href=\"#新字符设备注册方法\" class=\"headerlink\" title=\"新字符设备注册方法\"></a>新字符设备注册方法</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">include</span>/linux/cdev.h</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">cdev_init</span><span class=\"params\">(<span class=\"keyword\">struct</span> *cdev, <span class=\"type\">const</span> <span class=\"keyword\">struct</span> file_operations *fops)</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">cdev_add</span><span class=\"params\">(<span class=\"keyword\">struct</span> cdev *p, <span class=\"type\">dev_t</span> dev, <span class=\"type\">unsigned</span> count)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">cdev_del</span><span class=\"params\">(<span class=\"keyword\">struct</span> cdev *p)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"自动创建设备节点\"><a href=\"#自动创建设备节点\" class=\"headerlink\" title=\"自动创建设备节点\"></a>自动创建设备节点</h2><p>不需要使用mknod命令<br>udev: linux下一个应用程序，用于设备文件的创建和删除，使用busybox构建跟文件系统时，会创建一个简化版的udev—-&gt;mdev，所以在rcS文件中存在以下语句：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> /sbin/mdev &gt; /proc/sys/kernel/hotplug</span><br></pre></td></tr></table></figure>\n<p>自动创建设备节点需要一个class类</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">include</span>/linux/device.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> class_create(owner, name)</span></span><br><span class=\"line\">(&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"keyword\">struct</span> lock_class_ket __key;</span><br><span class=\"line\">    __class_create(owner, name, &amp;__key);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"keyword\">class</span> *__<span class=\"title\">class_create</span>(<span class=\"keyword\">struct</span> <span class=\"title\">module</span> *<span class=\"title\">owner</span>, <span class=\"title\">const</span> <span class=\"title\">char</span> *<span class=\"title\">name</span>, <span class=\"keyword\">struct</span> <span class=\"title\">lock_class_key</span> *<span class=\"title\">key</span>)</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">class_destroy</span>(<span class=\"keyword\">struct</span> <span class=\"keyword\">class</span> *<span class=\"title\">cls</span>);</span></span><br></pre></td></tr></table></figure>\n<p>创建设备</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> device *<span class=\"title function_\">device_create</span><span class=\"params\">(<span class=\"keyword\">struct</span> class *class</span></span><br><span class=\"line\"><span class=\"params\">                             <span class=\"keyword\">struct</span> device *parent,</span></span><br><span class=\"line\"><span class=\"params\">                             <span class=\"type\">dev_t</span> devt,</span></span><br><span class=\"line\"><span class=\"params\">                             <span class=\"type\">void</span> *drvdata,</span></span><br><span class=\"line\"><span class=\"params\">                             <span class=\"type\">const</span> <span class=\"type\">char</span> *fmt, ...)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">device_destroy</span><span class=\"params\">(<span class=\"keyword\">struct</span> class *class, <span class=\"type\">dev_t</span> devt)</span></span><br></pre></td></tr></table></figure>","path":"2023/02/25/linux驱动开发(3)/","permalink":"http://chengs.run/2023/02/25/linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91(3)/","tags":[{"name":"linux","_id":"cm833960c0002i0q66dwgd8wg","slug":"linux","path":"tags/linux/","permalink":"http://chengs.run/tags/linux/","length":13},{"name":"linux驱动开发","_id":"cm833960x001ci0q69qnhfuvg","slug":"linux驱动开发","path":"tags/linux驱动开发/","permalink":"http://chengs.run/tags/linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/","length":4}],"categories":[],"prev":{"title":"linux驱动开发(4)","date":"2023-02-27T07:02:13.404Z","slug":"linux驱动开发(4)","published":true,"updated":"2025-03-09T13:14:13.404Z","_id":"cm833960x001di0q6atnvg4ef","layout":"post","photos":[],"excerpt":"<p>设备树基础</p>","path":"2023/02/27/linux驱动开发(4)/","permalink":"http://chengs.run/2023/02/27/linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91(4)/","__post":true},"next":{"title":"linux驱动开发(2)","date":"2023-02-24T21:12:32.006Z","slug":"linux驱动开发(2)","published":true,"updated":"2023-02-24T21:12:32.006Z","_id":"cm833960v0018i0q66sth4xgu","layout":"post","photos":[],"excerpt":"<p>字符设备驱动开发基础</p>","path":"2023/02/24/linux驱动开发(2)/","permalink":"http://chengs.run/2023/02/24/linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91(2)/","__post":true},"__post":true}