{"title":"linux驱动开发(2)","date":"2023-02-24T21:12:32.006Z","source":"_posts/linux驱动开发(2).md","raw":"---\ntitle: linux驱动开发(2)\ndate: 2023-02-25 05:12:32.006\nupdated: 2023-02-25 05:12:32.006\ncategories: \ntags: \n- linux驱动开发\n- linux\n---\n字符设备驱动开发基础\n<!-- more -->\n物理内存：计算机底层的实际地址\n\n虚拟地址：现代计算机利用虚拟地址技术实现的一种地址\n\nMMU：Memory Manage Unit、1 完成虚拟空间到物理空间的映射。2 内存保护设置存储器的访问权限，设置虚拟存储空间的缓冲特性。\n\n# 内存映射\n```c\n#define ioremap(cookie, size) __arm_ioremap((cookie), (size), MT_DEVICE)\nvoid __iomem* __arm_ioremap(phys_addr_t phys_addr, size_t size, unsigned int mtype)\n{\n    return arch_ioremap_caller(phys_addr, size, mtype, __builtin_return_address(0));\n} \n\nmtype: MT_DEVICE MT_DEVICE_NONSHARED MT_DEVICE_CACHED MT_DEVICE_WC\n\nvoid iounmap(volatile void __iomem* addr);\n```\n# I/O内存访问函数\n映射的虚拟地址，其实本质就可直接通过指针访问，但是Linux内核不推荐这样做，而是推荐一组操作函数来对映射后的内存进行读写操作(猜测是为了可追溯、安全检查等)。\n```c\nu8 readb(const volatile void __iomem* addr)\nu16 readw(const volatile void __iomem* addr)\nu32 readl(const volatile void __iomem* addr)\n\nvoid writeb(u8 value, volatile void __iomem* addr)\nvoid writew(u16 value, volatile void __iomem* addr)\nvoid writel(u32 value, volatile void __iomem* addr)\n```\nTip：vscode在查找一些系统头文件目录的时候会优先使用系统的头文件目录，所以需要在vscode设置中将系统头文件目录屏蔽\n\n# Makefile编译驱动\n```makefile\nKERNELDIR := /home/chengs/imx6ull/linux\nCURRENT_PATH := $(shell pwd)\nMODULE_NAME := chrdevbase led\nobj-m := $(patsubst %, %.o, $(MODULE_NAME))\nDIRVERS := $(patsubst %, %.ko, $(MODULE_NAME))\n\nbuild: clean kernel_modules\n\nkernel_modules:\n\t$(MAKE) -C $(KERNELDIR) M=$(CURRENT_PATH) modules\n\tcp $(DIRVERS) $(CURRENT_PATH)/../rootfs/lib/modules/4.1.15/\nclean:\n\t$(MAKE) -C $(KERNELDIR) M=$(CURRENT_PATH) clean\n\n```\n\n\n\n","slug":"linux驱动开发(2)","published":true,"updated":"2023-02-24T21:12:32.006Z","_id":"cm833960v0018i0q66sth4xgu","comments":true,"layout":"post","photos":[],"html":"<p>字符设备驱动开发基础</p>\n<span id=\"more\"></span>\n<p>物理内存：计算机底层的实际地址</p>\n<p>虚拟地址：现代计算机利用虚拟地址技术实现的一种地址</p>\n<p>MMU：Memory Manage Unit、1 完成虚拟空间到物理空间的映射。2 内存保护设置存储器的访问权限，设置虚拟存储空间的缓冲特性。</p>\n<h1 id=\"内存映射\"><a href=\"#内存映射\" class=\"headerlink\" title=\"内存映射\"></a>内存映射</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ioremap(cookie, size) __arm_ioremap((cookie), (size), MT_DEVICE)</span></span><br><span class=\"line\"><span class=\"type\">void</span> __iomem* __arm_ioremap(<span class=\"type\">phys_addr_t</span> phys_addr, <span class=\"type\">size_t</span> size, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> mtype)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arch_ioremap_caller(phys_addr, size, mtype, __builtin_return_address(<span class=\"number\">0</span>));</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">mtype: MT_DEVICE MT_DEVICE_NONSHARED MT_DEVICE_CACHED MT_DEVICE_WC</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">iounmap</span><span class=\"params\">(<span class=\"keyword\">volatile</span> <span class=\"type\">void</span> __iomem* addr)</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"I-O内存访问函数\"><a href=\"#I-O内存访问函数\" class=\"headerlink\" title=\"I&#x2F;O内存访问函数\"></a>I&#x2F;O内存访问函数</h1><p>映射的虚拟地址，其实本质就可直接通过指针访问，但是Linux内核不推荐这样做，而是推荐一组操作函数来对映射后的内存进行读写操作(猜测是为了可追溯、安全检查等)。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u8 <span class=\"title function_\">readb</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"keyword\">volatile</span> <span class=\"type\">void</span> __iomem* addr)</span></span><br><span class=\"line\">u16 <span class=\"title function_\">readw</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"keyword\">volatile</span> <span class=\"type\">void</span> __iomem* addr)</span></span><br><span class=\"line\">u32 <span class=\"title function_\">readl</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"keyword\">volatile</span> <span class=\"type\">void</span> __iomem* addr)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">writeb</span><span class=\"params\">(u8 value, <span class=\"keyword\">volatile</span> <span class=\"type\">void</span> __iomem* addr)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">writew</span><span class=\"params\">(u16 value, <span class=\"keyword\">volatile</span> <span class=\"type\">void</span> __iomem* addr)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">writel</span><span class=\"params\">(u32 value, <span class=\"keyword\">volatile</span> <span class=\"type\">void</span> __iomem* addr)</span></span><br></pre></td></tr></table></figure>\n<p>Tip：vscode在查找一些系统头文件目录的时候会优先使用系统的头文件目录，所以需要在vscode设置中将系统头文件目录屏蔽</p>\n<h1 id=\"Makefile编译驱动\"><a href=\"#Makefile编译驱动\" class=\"headerlink\" title=\"Makefile编译驱动\"></a>Makefile编译驱动</h1><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KERNELDIR := /home/chengs/imx6ull/linux</span><br><span class=\"line\">CURRENT_PATH := <span class=\"variable\">$(<span class=\"built_in\">shell</span> pwd)</span></span><br><span class=\"line\">MODULE_NAME := chrdevbase led</span><br><span class=\"line\">obj-m := <span class=\"variable\">$(<span class=\"built_in\">patsubst</span> %, %.o, <span class=\"variable\">$(MODULE_NAME)</span>)</span></span><br><span class=\"line\">DIRVERS := <span class=\"variable\">$(<span class=\"built_in\">patsubst</span> %, %.ko, <span class=\"variable\">$(MODULE_NAME)</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">build: clean kernel_modules</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">kernel_modules:</span></span><br><span class=\"line\">\t<span class=\"variable\">$(MAKE)</span> -C <span class=\"variable\">$(KERNELDIR)</span> M=<span class=\"variable\">$(CURRENT_PATH)</span> modules</span><br><span class=\"line\">\tcp <span class=\"variable\">$(DIRVERS)</span> <span class=\"variable\">$(CURRENT_PATH)</span>/../rootfs/lib/modules/4.1.15/</span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\t<span class=\"variable\">$(MAKE)</span> -C <span class=\"variable\">$(KERNELDIR)</span> M=<span class=\"variable\">$(CURRENT_PATH)</span> clean</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n","excerpt":"<p>字符设备驱动开发基础</p>","more":"<p>物理内存：计算机底层的实际地址</p>\n<p>虚拟地址：现代计算机利用虚拟地址技术实现的一种地址</p>\n<p>MMU：Memory Manage Unit、1 完成虚拟空间到物理空间的映射。2 内存保护设置存储器的访问权限，设置虚拟存储空间的缓冲特性。</p>\n<h1 id=\"内存映射\"><a href=\"#内存映射\" class=\"headerlink\" title=\"内存映射\"></a>内存映射</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ioremap(cookie, size) __arm_ioremap((cookie), (size), MT_DEVICE)</span></span><br><span class=\"line\"><span class=\"type\">void</span> __iomem* __arm_ioremap(<span class=\"type\">phys_addr_t</span> phys_addr, <span class=\"type\">size_t</span> size, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> mtype)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arch_ioremap_caller(phys_addr, size, mtype, __builtin_return_address(<span class=\"number\">0</span>));</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">mtype: MT_DEVICE MT_DEVICE_NONSHARED MT_DEVICE_CACHED MT_DEVICE_WC</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">iounmap</span><span class=\"params\">(<span class=\"keyword\">volatile</span> <span class=\"type\">void</span> __iomem* addr)</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"I-O内存访问函数\"><a href=\"#I-O内存访问函数\" class=\"headerlink\" title=\"I&#x2F;O内存访问函数\"></a>I&#x2F;O内存访问函数</h1><p>映射的虚拟地址，其实本质就可直接通过指针访问，但是Linux内核不推荐这样做，而是推荐一组操作函数来对映射后的内存进行读写操作(猜测是为了可追溯、安全检查等)。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u8 <span class=\"title function_\">readb</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"keyword\">volatile</span> <span class=\"type\">void</span> __iomem* addr)</span></span><br><span class=\"line\">u16 <span class=\"title function_\">readw</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"keyword\">volatile</span> <span class=\"type\">void</span> __iomem* addr)</span></span><br><span class=\"line\">u32 <span class=\"title function_\">readl</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"keyword\">volatile</span> <span class=\"type\">void</span> __iomem* addr)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">writeb</span><span class=\"params\">(u8 value, <span class=\"keyword\">volatile</span> <span class=\"type\">void</span> __iomem* addr)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">writew</span><span class=\"params\">(u16 value, <span class=\"keyword\">volatile</span> <span class=\"type\">void</span> __iomem* addr)</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">writel</span><span class=\"params\">(u32 value, <span class=\"keyword\">volatile</span> <span class=\"type\">void</span> __iomem* addr)</span></span><br></pre></td></tr></table></figure>\n<p>Tip：vscode在查找一些系统头文件目录的时候会优先使用系统的头文件目录，所以需要在vscode设置中将系统头文件目录屏蔽</p>\n<h1 id=\"Makefile编译驱动\"><a href=\"#Makefile编译驱动\" class=\"headerlink\" title=\"Makefile编译驱动\"></a>Makefile编译驱动</h1><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KERNELDIR := /home/chengs/imx6ull/linux</span><br><span class=\"line\">CURRENT_PATH := <span class=\"variable\">$(<span class=\"built_in\">shell</span> pwd)</span></span><br><span class=\"line\">MODULE_NAME := chrdevbase led</span><br><span class=\"line\">obj-m := <span class=\"variable\">$(<span class=\"built_in\">patsubst</span> %, %.o, <span class=\"variable\">$(MODULE_NAME)</span>)</span></span><br><span class=\"line\">DIRVERS := <span class=\"variable\">$(<span class=\"built_in\">patsubst</span> %, %.ko, <span class=\"variable\">$(MODULE_NAME)</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">build: clean kernel_modules</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">kernel_modules:</span></span><br><span class=\"line\">\t<span class=\"variable\">$(MAKE)</span> -C <span class=\"variable\">$(KERNELDIR)</span> M=<span class=\"variable\">$(CURRENT_PATH)</span> modules</span><br><span class=\"line\">\tcp <span class=\"variable\">$(DIRVERS)</span> <span class=\"variable\">$(CURRENT_PATH)</span>/../rootfs/lib/modules/4.1.15/</span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\t<span class=\"variable\">$(MAKE)</span> -C <span class=\"variable\">$(KERNELDIR)</span> M=<span class=\"variable\">$(CURRENT_PATH)</span> clean</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","path":"2023/02/24/linux驱动开发(2)/","permalink":"http://chengs.run/2023/02/24/linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91(2)/","tags":[{"name":"linux","_id":"cm833960c0002i0q66dwgd8wg","slug":"linux","path":"tags/linux/","permalink":"http://chengs.run/tags/linux/","length":13},{"name":"linux驱动开发","_id":"cm833960x001ci0q69qnhfuvg","slug":"linux驱动开发","path":"tags/linux驱动开发/","permalink":"http://chengs.run/tags/linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/","length":4}],"categories":[],"prev":{"title":"linux驱动开发(3)","date":"2023-02-25T17:30:11.506Z","slug":"linux驱动开发(3)","published":true,"updated":"2023-02-25T17:31:03.345Z","_id":"cm833960w001ai0q6e5x18ch1","layout":"post","photos":[],"excerpt":"<p>新字符设备驱动</p>","path":"2023/02/25/linux驱动开发(3)/","permalink":"http://chengs.run/2023/02/25/linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91(3)/","__post":true},"next":{"title":"linux驱动开发(1)","date":"2023-02-24T06:39:00.931Z","slug":"linux驱动开发(1)","published":true,"updated":"2023-02-24T06:39:00.931Z","_id":"cm833960t0012i0q62bqc6p4r","layout":"post","photos":[],"excerpt":"<p>字符设备驱动开发基础</p>","path":"2023/02/24/linux驱动开发(1)/","permalink":"http://chengs.run/2023/02/24/linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91(1)/","__post":true},"__post":true}